/**
 * Project Wonderland
 *
 * Copyright (c) 2004-2008, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * Sun designates this particular file as subject to the "Classpath" 
 * exception as provided by Sun in the License file that accompanied 
 * this code.
 */
/*
 * AdvOptions.java
 *
 * Created on Nov 24, 2008, 2:18:06 PM
 */

package imi.gui;

import com.jme.math.Vector3f;
import imi.scene.PMatrix;
import imi.scene.polygonmodel.parts.skinned.SkeletonNode;
import imi.scene.polygonmodel.parts.skinned.SkinnedMeshJoint;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * @author Paul Viet Nguyen Truong (ptruong)
 */
public class AdvOptions extends javax.swing.JFrame {
////////////////////////////////////////////////////////////////////////////////
// Class Data Members
////////////////////////////////////////////////////////////////////////////////
    private Map<m_bodyPart, SkinnedMeshJoint[]> m_skeleton;
    private SceneEssentials                     m_sceneData;
    private float                               m_baseLen = 10.0f;
    private float                               m_baseScale = 20.0f;
////////////////////////////////////////////////////////////////////////////////
// Enumerations for the skeleton and body
////////////////////////////////////////////////////////////////////////////////
    public  enum m_bodyPart { Left_UpperLeg, Left_LowerLeg, Left_Foot, Left_UpperArm, Left_LowerArm, Left_Hand, Left_Shoulder,
                              Right_UpperLeg, Right_LowerLeg, Right_Foot, Right_UpperArm, Right_LowerArm, Right_Hand, Right_Shoulder,
                              Head, Torso, Neck, Eyes, Lips };

////////////////////////////////////////////////////////////////////////////////
// Class Methods
////////////////////////////////////////////////////////////////////////////////
    /** Creates new form AdvOptions */
    public AdvOptions() {
        initComponents();
    }

    public AdvOptions(SceneEssentials scene) {
        initComponents();
        m_sceneData = scene;
        createJointCatalog();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane_Main = new javax.swing.JTabbedPane();
        jPanel_MainHead = new javax.swing.JPanel();
        jTabbedPane_Head = new javax.swing.JTabbedPane();
        jPanel_Eyes = new javax.swing.JPanel();
        jPanel_EyePosH = new javax.swing.JPanel();
        jSlider_EyePosHL = new javax.swing.JSlider();
        jSlider_EyePosHR = new javax.swing.JSlider();
        jSpinner_EyePosHL = new javax.swing.JSpinner();
        jSpinner_EyePosHR = new javax.swing.JSpinner();
        jCheckBox_EyesHPosSync = new javax.swing.JCheckBox();
        jPanel_EyePosV = new javax.swing.JPanel();
        jSlider_EyePosVL = new javax.swing.JSlider();
        jSlider_EyePosVR = new javax.swing.JSlider();
        jSpinner_EyePosVL = new javax.swing.JSpinner();
        jSpinner_EyePosVR = new javax.swing.JSpinner();
        jCheckBox_EyeVPosSync = new javax.swing.JCheckBox();
        jPanel_EyePosD = new javax.swing.JPanel();
        jSlider_EyePosDL = new javax.swing.JSlider();
        jSlider_EyePosDR = new javax.swing.JSlider();
        jCheckBox_EyeDPosSync = new javax.swing.JCheckBox();
        jSpinner_EyePosDL = new javax.swing.JSpinner();
        jSpinner_EyePosDR = new javax.swing.JSpinner();
        jPanel_EyeScaling = new javax.swing.JPanel();
        jLabel_EyeX = new javax.swing.JLabel();
        jSlider_EyeX = new javax.swing.JSlider();
        jLabel_EyeY = new javax.swing.JLabel();
        jSlider_EyeY = new javax.swing.JSlider();
        jLabel_EyeZ = new javax.swing.JLabel();
        jSlider_EyeZ = new javax.swing.JSlider();
        jLabel_EyeUni = new javax.swing.JLabel();
        jSlider_EyeUni = new javax.swing.JSlider();
        jPanel_Nose = new javax.swing.JPanel();
        jPanel_NosePosH = new javax.swing.JPanel();
        jSlider_NosePosH = new javax.swing.JSlider();
        jSpinner_NosePosH = new javax.swing.JSpinner();
        jPanel_NoseLen = new javax.swing.JPanel();
        jSlider_NoseLen = new javax.swing.JSlider();
        jSpinner_NoseLen = new javax.swing.JSpinner();
        jPanel_NoseWidth = new javax.swing.JPanel();
        jSlider_NoseWidth = new javax.swing.JSlider();
        jSpinner_NoseWidth = new javax.swing.JSpinner();
        jPanel_NoseScaling = new javax.swing.JPanel();
        jLabel_NoseX = new javax.swing.JLabel();
        jSlider_NoseX = new javax.swing.JSlider();
        jLabel_NoseY = new javax.swing.JLabel();
        jSlider_NoseY = new javax.swing.JSlider();
        jLabel_NoseZ = new javax.swing.JLabel();
        jSlider_NoseZ = new javax.swing.JSlider();
        jLabel_NoseU = new javax.swing.JLabel();
        jSlider_NoseU = new javax.swing.JSlider();
        jPanel_Mouth = new javax.swing.JPanel();
        jPanel_LipsPos = new javax.swing.JPanel();
        jSlider_UpperLip = new javax.swing.JSlider();
        jSlider_LowerLip = new javax.swing.JSlider();
        jSpinner_UpperLip = new javax.swing.JSpinner();
        jSpinner_LowerLip = new javax.swing.JSpinner();
        jPanel_MouthWidth = new javax.swing.JPanel();
        jSlider_MouthWidth = new javax.swing.JSlider();
        jSpinner_MouthWidth = new javax.swing.JSpinner();
        jPanel_MouthScaling = new javax.swing.JPanel();
        jLabel_MouthX = new javax.swing.JLabel();
        jSlider_MouthX = new javax.swing.JSlider();
        jLabel_MouthY = new javax.swing.JLabel();
        jSlider_MouthY = new javax.swing.JSlider();
        jLabel_MouthZ = new javax.swing.JLabel();
        jSlider_MouthZ = new javax.swing.JSlider();
        jLabel_MouthU = new javax.swing.JLabel();
        jSlider_MouthU = new javax.swing.JSlider();
        jPanel_UniformHead = new javax.swing.JPanel();
        jPanel_HeadWidth = new javax.swing.JPanel();
        jSlider_HeadWidth = new javax.swing.JSlider();
        jSpinner_HeadWidth = new javax.swing.JSpinner();
        jPanel_HeadHeight = new javax.swing.JPanel();
        jSlider_HeadHeight = new javax.swing.JSlider();
        jSpinner_HeadHeight = new javax.swing.JSpinner();
        jPanel_HeadDepth = new javax.swing.JPanel();
        jSlider_HeadDepth = new javax.swing.JSlider();
        jSpinner_HeadDepth = new javax.swing.JSpinner();
        jPanel_HeadUniform = new javax.swing.JPanel();
        jSlider_HeadUniform = new javax.swing.JSlider();
        jSpinner_HeadUniform = new javax.swing.JSpinner();
        jPanel_MainArmsHands = new javax.swing.JPanel();
        jTabbedPane_ArmsHands = new javax.swing.JTabbedPane();
        jPanel_Hands = new javax.swing.JPanel();
        jPanel_FingerLength = new javax.swing.JPanel();
        jSlider_FingerLengthR = new javax.swing.JSlider();
        jSlider_FingerLengthL = new javax.swing.JSlider();
        jCheckBox_HandsLenSync = new javax.swing.JCheckBox();
        jSpinner_FingerLengthR = new javax.swing.JSpinner();
        jSpinner_FingerLengthL = new javax.swing.JSpinner();
        jPanel_HandThickness = new javax.swing.JPanel();
        jSlider_HandThicknessR = new javax.swing.JSlider();
        jSlider_HandThicknessL = new javax.swing.JSlider();
        jCheckBox_HandThickSync = new javax.swing.JCheckBox();
        jSpinner_HandThicknessL = new javax.swing.JSpinner();
        jSpinner_HandThicknessR = new javax.swing.JSpinner();
        jPanel_Forearms = new javax.swing.JPanel();
        jPanel_ForearmLength = new javax.swing.JPanel();
        jSlider_ForearmLengthR = new javax.swing.JSlider();
        jSlider_ForearmLengthL = new javax.swing.JSlider();
        jCheckBox_ForearmLenSync = new javax.swing.JCheckBox();
        jSpinner_ForearmLengthL = new javax.swing.JSpinner();
        jSpinner_ForearmLengthR = new javax.swing.JSpinner();
        jPanel_ForearmThickness = new javax.swing.JPanel();
        jSlider_ForearmThicknessR = new javax.swing.JSlider();
        jSlider_ForearmThicknessL = new javax.swing.JSlider();
        jCheckBox_ForearmThickSync = new javax.swing.JCheckBox();
        jSpinner_ForearmThicknessL = new javax.swing.JSpinner();
        jSpinner_ForearmThicknessR = new javax.swing.JSpinner();
        jPanel_UpperArms = new javax.swing.JPanel();
        jPanel_UpperarmLength = new javax.swing.JPanel();
        jSlider_UpperarmLengthR = new javax.swing.JSlider();
        jSlider_UpperArmLengthL = new javax.swing.JSlider();
        jCheckBox_UpperarmLenSync = new javax.swing.JCheckBox();
        jSpinner_UpperarmLengthL = new javax.swing.JSpinner();
        jSpinner_UpperarmLengthR = new javax.swing.JSpinner();
        jPanel_UpperarmThickness = new javax.swing.JPanel();
        jSlider_UpperarmThicknessR = new javax.swing.JSlider();
        jSlider_UpperarmThicknessL = new javax.swing.JSlider();
        jCheckBox_UpperarmThickSync = new javax.swing.JCheckBox();
        jSpinner_UpperarmThicknessL = new javax.swing.JSpinner();
        jSpinner_UpperarmThicknessR = new javax.swing.JSpinner();
        jPanel_MainLegsFeet = new javax.swing.JPanel();
        jTabbedPane_LegsFeet = new javax.swing.JTabbedPane();
        jPanel_Feet = new javax.swing.JPanel();
        jPanel_FeetLength = new javax.swing.JPanel();
        jSlider_FeetLengthR = new javax.swing.JSlider();
        jSlider_FeetLengthL = new javax.swing.JSlider();
        jCheckBox_FeetLenSync = new javax.swing.JCheckBox();
        jSpinner_FeetLengthL = new javax.swing.JSpinner();
        jSpinner_FeetLengthR = new javax.swing.JSpinner();
        jPanel_FeetThickness = new javax.swing.JPanel();
        jSlider_FeetThicknessR = new javax.swing.JSlider();
        jSlider_FeetThicknessL = new javax.swing.JSlider();
        jCheckBox_FeetThickSync = new javax.swing.JCheckBox();
        jSpinner_FeetThicknessL = new javax.swing.JSpinner();
        jSpinner_FeetThicknessR = new javax.swing.JSpinner();
        jPanel_Calves = new javax.swing.JPanel();
        jPanel_CalvesLength = new javax.swing.JPanel();
        jSlider_CalvesLengthR = new javax.swing.JSlider();
        jSlider_CalvesLengthL = new javax.swing.JSlider();
        jCheckBox_CalvesLenSync = new javax.swing.JCheckBox();
        jSpinner_CalvesLengthL = new javax.swing.JSpinner();
        jSpinner_CalvesLengthR = new javax.swing.JSpinner();
        jPanel_CalvesThickness = new javax.swing.JPanel();
        jSlider_CalvesThicknessR = new javax.swing.JSlider();
        jSlider_CalvesThicknessL = new javax.swing.JSlider();
        jCheckBox_CalvesThickSync = new javax.swing.JCheckBox();
        jSpinner_CalvesThicknessL = new javax.swing.JSpinner();
        jSpinner_CalvesThicknessR = new javax.swing.JSpinner();
        jPanel_Thighs = new javax.swing.JPanel();
        jPanel_ThighLength = new javax.swing.JPanel();
        jSlider_ThighLengthR = new javax.swing.JSlider();
        jSlider_ThighLengthL = new javax.swing.JSlider();
        jCheckBox_ThighLenSync = new javax.swing.JCheckBox();
        jSpinner_ThighLengthL = new javax.swing.JSpinner();
        jSpinner_ThighLengthR = new javax.swing.JSpinner();
        jPanel_ThighThickness = new javax.swing.JPanel();
        jSlider_ThighThicknessR = new javax.swing.JSlider();
        jSlider_ThighThicknessL = new javax.swing.JSlider();
        jCheckBox_ThighThickSync = new javax.swing.JCheckBox();
        jSpinner_ThighThicknessL = new javax.swing.JSpinner();
        jSpinner_ThighThicknessR = new javax.swing.JSpinner();
        jPanel_MainBody = new javax.swing.JPanel();
        jTabbedPane_Body = new javax.swing.JTabbedPane();
        jPanel_Chest = new javax.swing.JPanel();
        jPanel_ChestBulk = new javax.swing.JPanel();
        jSlider_ChestBulk = new javax.swing.JSlider();
        jSpinner_ChestBulk = new javax.swing.JSpinner();
        jPanel_ChestBroadness = new javax.swing.JPanel();
        jSlider_ChestBroadness = new javax.swing.JSlider();
        jSpinner_ChestBroadness = new javax.swing.JSpinner();
        jPanel_Abs = new javax.swing.JPanel();
        jPanel_BellyRoundness = new javax.swing.JPanel();
        jSlider_BellyRoundness = new javax.swing.JSlider();
        jSpinner_BellyRoundness = new javax.swing.JSpinner();
        jPanel_Waistline = new javax.swing.JPanel();
        jSlider_Waistline = new javax.swing.JSlider();
        jSpinner_Waistline = new javax.swing.JSpinner();
        jPanel_Gluts = new javax.swing.JPanel();
        jPanel_GlutRoundness = new javax.swing.JPanel();
        jSlider_GlutRoundness = new javax.swing.JSlider();
        jSpinner_GlutRoundness = new javax.swing.JSpinner();
        jPanel_GlutSag = new javax.swing.JPanel();
        jSlider_GlutSag = new javax.swing.JSlider();
        jSpinner_GlutSag = new javax.swing.JSpinner();
        jPanel_UniformBody = new javax.swing.JPanel();
        jPanel_BodyWidth = new javax.swing.JPanel();
        jSlider_BodyWidth = new javax.swing.JSlider();
        jSpinner_UBodyWidthScale = new javax.swing.JSpinner();
        jPanel_BodyHeight = new javax.swing.JPanel();
        jSlider_BodyHeight = new javax.swing.JSlider();
        jSpinner_UBodyHeightScale = new javax.swing.JSpinner();
        jPanel_BodyDepth = new javax.swing.JPanel();
        jSlider_BodyDepth = new javax.swing.JSlider();
        jSpinner_UBodyDepthScale = new javax.swing.JSpinner();
        jPanel_BodyUniform = new javax.swing.JPanel();
        jSlider_BodyUniform = new javax.swing.JSlider();
        jSpinner_UbodyUniScale = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jTabbedPane_Main.setPreferredSize(new java.awt.Dimension(300, 600));

        jPanel_MainHead.setPreferredSize(new java.awt.Dimension(260, 600));
        jPanel_MainHead.setLayout(new java.awt.GridBagLayout());

        jTabbedPane_Head.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jTabbedPane_Head.setMinimumSize(new java.awt.Dimension(262, 560));
        jTabbedPane_Head.setPreferredSize(new java.awt.Dimension(262, 560));

        jPanel_Eyes.setMinimumSize(new java.awt.Dimension(210, 500));
        jPanel_Eyes.setPreferredSize(new java.awt.Dimension(210, 500));
        jPanel_Eyes.setLayout(new java.awt.GridBagLayout());

        jPanel_EyePosH.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Horizontal Position", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel_EyePosH.setPreferredSize(new java.awt.Dimension(210, 110));
        jPanel_EyePosH.setLayout(new java.awt.GridBagLayout());

        jSlider_EyePosHL.setMaximum(10);
        jSlider_EyePosHL.setMinorTickSpacing(1);
        jSlider_EyePosHL.setPaintTicks(true);
        jSlider_EyePosHL.setSnapToTicks(true);
        jSlider_EyePosHL.setValue(5);
        jSlider_EyePosHL.setMinimumSize(new java.awt.Dimension(100, 29));
        jSlider_EyePosHL.setPreferredSize(new java.awt.Dimension(100, 29));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel_EyePosH.add(jSlider_EyePosHL, gridBagConstraints);

        jSlider_EyePosHR.setMaximum(10);
        jSlider_EyePosHR.setMinorTickSpacing(1);
        jSlider_EyePosHR.setPaintTicks(true);
        jSlider_EyePosHR.setSnapToTicks(true);
        jSlider_EyePosHR.setValue(5);
        jSlider_EyePosHR.setMinimumSize(new java.awt.Dimension(100, 29));
        jSlider_EyePosHR.setPreferredSize(new java.awt.Dimension(100, 29));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel_EyePosH.add(jSlider_EyePosHR, gridBagConstraints);

        jSpinner_EyePosHL.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_EyePosHL.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel_EyePosH.add(jSpinner_EyePosHL, gridBagConstraints);

        jSpinner_EyePosHR.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_EyePosHR.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_EyePosH.add(jSpinner_EyePosHR, gridBagConstraints);

        jCheckBox_EyesHPosSync.setSelected(true);
        jCheckBox_EyesHPosSync.setText("Sync");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        jPanel_EyePosH.add(jCheckBox_EyesHPosSync, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel_Eyes.add(jPanel_EyePosH, gridBagConstraints);

        jPanel_EyePosV.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Vertical Position", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel_EyePosV.setMinimumSize(new java.awt.Dimension(177, 175));
        jPanel_EyePosV.setPreferredSize(new java.awt.Dimension(200, 175));
        jPanel_EyePosV.setLayout(new java.awt.GridBagLayout());

        jSlider_EyePosVL.setMaximum(20);
        jSlider_EyePosVL.setMinimum(1);
        jSlider_EyePosVL.setMinorTickSpacing(1);
        jSlider_EyePosVL.setOrientation(javax.swing.JSlider.VERTICAL);
        jSlider_EyePosVL.setPaintTicks(true);
        jSlider_EyePosVL.setSnapToTicks(true);
        jSlider_EyePosVL.setValue(5);
        jSlider_EyePosVL.setMinimumSize(new java.awt.Dimension(29, 100));
        jSlider_EyePosVL.setPreferredSize(new java.awt.Dimension(29, 100));
        jSlider_EyePosVL.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent e) {
                adjustEyes(1, e);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        jPanel_EyePosV.add(jSlider_EyePosVL, gridBagConstraints);

        jSlider_EyePosVR.setMaximum(20);
        jSlider_EyePosVR.setMinimum(1);
        jSlider_EyePosVR.setMinorTickSpacing(1);
        jSlider_EyePosVR.setOrientation(javax.swing.JSlider.VERTICAL);
        jSlider_EyePosVR.setPaintTicks(true);
        jSlider_EyePosVR.setSnapToTicks(true);
        jSlider_EyePosVR.setValue(5);
        jSlider_EyePosVR.setMinimumSize(new java.awt.Dimension(29, 100));
        jSlider_EyePosVR.setPreferredSize(new java.awt.Dimension(29, 100));
        jSlider_EyePosVR.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent e) {
                adjustEyes(1, e);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        jPanel_EyePosV.add(jSlider_EyePosVR, gridBagConstraints);

        jSpinner_EyePosVL.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_EyePosVL.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel_EyePosV.add(jSpinner_EyePosVL, gridBagConstraints);

        jSpinner_EyePosVR.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_EyePosVR.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_EyePosV.add(jSpinner_EyePosVR, gridBagConstraints);

        jCheckBox_EyeVPosSync.setSelected(true);
        jCheckBox_EyeVPosSync.setText("Sync");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        jPanel_EyePosV.add(jCheckBox_EyeVPosSync, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel_Eyes.add(jPanel_EyePosV, gridBagConstraints);

        jPanel_EyePosD.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Depth Position", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel_EyePosD.setPreferredSize(new java.awt.Dimension(200, 110));
        jPanel_EyePosD.setLayout(new java.awt.GridBagLayout());

        jSlider_EyePosDL.setMaximum(10);
        jSlider_EyePosDL.setMinorTickSpacing(1);
        jSlider_EyePosDL.setPaintTicks(true);
        jSlider_EyePosDL.setSnapToTicks(true);
        jSlider_EyePosDL.setValue(5);
        jSlider_EyePosDL.setMinimumSize(new java.awt.Dimension(100, 29));
        jSlider_EyePosDL.setPreferredSize(new java.awt.Dimension(100, 29));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel_EyePosD.add(jSlider_EyePosDL, gridBagConstraints);

        jSlider_EyePosDR.setMaximum(10);
        jSlider_EyePosDR.setMinorTickSpacing(1);
        jSlider_EyePosDR.setPaintTicks(true);
        jSlider_EyePosDR.setSnapToTicks(true);
        jSlider_EyePosDR.setValue(5);
        jSlider_EyePosDR.setMinimumSize(new java.awt.Dimension(100, 29));
        jSlider_EyePosDR.setPreferredSize(new java.awt.Dimension(100, 29));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel_EyePosD.add(jSlider_EyePosDR, gridBagConstraints);

        jCheckBox_EyeDPosSync.setSelected(true);
        jCheckBox_EyeDPosSync.setText("Sync");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        jPanel_EyePosD.add(jCheckBox_EyeDPosSync, gridBagConstraints);

        jSpinner_EyePosDL.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_EyePosDL.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel_EyePosD.add(jSpinner_EyePosDL, gridBagConstraints);

        jSpinner_EyePosDR.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_EyePosDR.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_EyePosD.add(jSpinner_EyePosDR, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel_Eyes.add(jPanel_EyePosD, gridBagConstraints);

        jPanel_EyeScaling.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Scaling", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel_EyeScaling.setLayout(new java.awt.GridBagLayout());

        jLabel_EyeX.setText("X");
        jPanel_EyeScaling.add(jLabel_EyeX, new java.awt.GridBagConstraints());

        jSlider_EyeX.setPaintTicks(true);
        jSlider_EyeX.setSnapToTicks(true);
        jPanel_EyeScaling.add(jSlider_EyeX, new java.awt.GridBagConstraints());

        jLabel_EyeY.setText("Y");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_EyeScaling.add(jLabel_EyeY, gridBagConstraints);

        jSlider_EyeY.setPaintTicks(true);
        jSlider_EyeY.setSnapToTicks(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel_EyeScaling.add(jSlider_EyeY, gridBagConstraints);

        jLabel_EyeZ.setText("Z");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        jPanel_EyeScaling.add(jLabel_EyeZ, gridBagConstraints);

        jSlider_EyeZ.setPaintTicks(true);
        jSlider_EyeZ.setSnapToTicks(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        jPanel_EyeScaling.add(jSlider_EyeZ, gridBagConstraints);

        jLabel_EyeUni.setText("U");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        jPanel_EyeScaling.add(jLabel_EyeUni, gridBagConstraints);

        jSlider_EyeUni.setPaintTicks(true);
        jSlider_EyeUni.setSnapToTicks(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        jPanel_EyeScaling.add(jSlider_EyeUni, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel_Eyes.add(jPanel_EyeScaling, gridBagConstraints);

        jTabbedPane_Head.addTab("Eyes", jPanel_Eyes);

        jPanel_Nose.setMinimumSize(new java.awt.Dimension(210, 500));
        jPanel_Nose.setPreferredSize(new java.awt.Dimension(210, 500));
        jPanel_Nose.setLayout(new java.awt.GridBagLayout());

        jPanel_NosePosH.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Bridge Position", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel_NosePosH.setMinimumSize(new java.awt.Dimension(87, 160));
        jPanel_NosePosH.setPreferredSize(new java.awt.Dimension(210, 160));
        jPanel_NosePosH.setLayout(new java.awt.GridBagLayout());

        jSlider_NosePosH.setOrientation(javax.swing.JSlider.VERTICAL);
        jSlider_NosePosH.setPaintTicks(true);
        jSlider_NosePosH.setSnapToTicks(true);
        jSlider_NosePosH.setMinimumSize(new java.awt.Dimension(29, 100));
        jSlider_NosePosH.setPreferredSize(new java.awt.Dimension(29, 100));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel_NosePosH.add(jSlider_NosePosH, gridBagConstraints);

        jSpinner_NosePosH.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_NosePosH.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_NosePosH.add(jSpinner_NosePosH, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel_Nose.add(jPanel_NosePosH, gridBagConstraints);

        jPanel_NoseLen.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Length", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel_NoseLen.setMinimumSize(new java.awt.Dimension(210, 110));
        jPanel_NoseLen.setPreferredSize(new java.awt.Dimension(210, 110));
        jPanel_NoseLen.setLayout(new java.awt.GridBagLayout());

        jSlider_NoseLen.setPaintTicks(true);
        jSlider_NoseLen.setSnapToTicks(true);
        jSlider_NoseLen.setMinimumSize(new java.awt.Dimension(190, 29));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel_NoseLen.add(jSlider_NoseLen, gridBagConstraints);

        jSpinner_NoseLen.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_NoseLen.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_NoseLen.add(jSpinner_NoseLen, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel_Nose.add(jPanel_NoseLen, gridBagConstraints);

        jPanel_NoseWidth.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Width", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel_NoseWidth.setMinimumSize(new java.awt.Dimension(210, 110));
        jPanel_NoseWidth.setPreferredSize(new java.awt.Dimension(210, 110));
        jPanel_NoseWidth.setLayout(new java.awt.GridBagLayout());

        jSlider_NoseWidth.setPaintTicks(true);
        jSlider_NoseWidth.setSnapToTicks(true);
        jSlider_NoseWidth.setMinimumSize(new java.awt.Dimension(190, 29));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel_NoseWidth.add(jSlider_NoseWidth, gridBagConstraints);

        jSpinner_NoseWidth.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_NoseWidth.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_NoseWidth.add(jSpinner_NoseWidth, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel_Nose.add(jPanel_NoseWidth, gridBagConstraints);

        jPanel_NoseScaling.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Scaling", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel_NoseScaling.setMinimumSize(new java.awt.Dimension(210, 144));
        jPanel_NoseScaling.setPreferredSize(new java.awt.Dimension(210, 144));
        jPanel_NoseScaling.setLayout(new java.awt.GridBagLayout());

        jLabel_NoseX.setText("X");
        jPanel_NoseScaling.add(jLabel_NoseX, new java.awt.GridBagConstraints());

        jSlider_NoseX.setPaintTicks(true);
        jSlider_NoseX.setSnapToTicks(true);
        jSlider_NoseX.setMinimumSize(new java.awt.Dimension(170, 29));
        jPanel_NoseScaling.add(jSlider_NoseX, new java.awt.GridBagConstraints());

        jLabel_NoseY.setText("Y");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_NoseScaling.add(jLabel_NoseY, gridBagConstraints);

        jSlider_NoseY.setPaintTicks(true);
        jSlider_NoseY.setSnapToTicks(true);
        jSlider_NoseY.setMinimumSize(new java.awt.Dimension(170, 29));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel_NoseScaling.add(jSlider_NoseY, gridBagConstraints);

        jLabel_NoseZ.setText("Z");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        jPanel_NoseScaling.add(jLabel_NoseZ, gridBagConstraints);

        jSlider_NoseZ.setPaintTicks(true);
        jSlider_NoseZ.setSnapToTicks(true);
        jSlider_NoseZ.setMinimumSize(new java.awt.Dimension(170, 29));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        jPanel_NoseScaling.add(jSlider_NoseZ, gridBagConstraints);

        jLabel_NoseU.setText("U");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        jPanel_NoseScaling.add(jLabel_NoseU, gridBagConstraints);

        jSlider_NoseU.setPaintTicks(true);
        jSlider_NoseU.setSnapToTicks(true);
        jSlider_NoseU.setMinimumSize(new java.awt.Dimension(170, 29));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        jPanel_NoseScaling.add(jSlider_NoseU, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel_Nose.add(jPanel_NoseScaling, gridBagConstraints);

        jTabbedPane_Head.addTab("Nose", jPanel_Nose);

        jPanel_Mouth.setPreferredSize(new java.awt.Dimension(200, 300));
        jPanel_Mouth.setLayout(new java.awt.GridBagLayout());

        jPanel_LipsPos.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Lips Position", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel_LipsPos.setMinimumSize(new java.awt.Dimension(210, 190));
        jPanel_LipsPos.setPreferredSize(new java.awt.Dimension(210, 190));
        jPanel_LipsPos.setLayout(new java.awt.GridBagLayout());

        jSlider_UpperLip.setOrientation(javax.swing.JSlider.VERTICAL);
        jSlider_UpperLip.setPaintTicks(true);
        jSlider_UpperLip.setSnapToTicks(true);
        jSlider_UpperLip.setMinimumSize(new java.awt.Dimension(29, 100));
        jSlider_UpperLip.setPreferredSize(new java.awt.Dimension(29, 100));
        jPanel_LipsPos.add(jSlider_UpperLip, new java.awt.GridBagConstraints());

        jSlider_LowerLip.setOrientation(javax.swing.JSlider.VERTICAL);
        jSlider_LowerLip.setPaintTicks(true);
        jSlider_LowerLip.setSnapToTicks(true);
        jSlider_LowerLip.setMinimumSize(new java.awt.Dimension(29, 100));
        jSlider_LowerLip.setPreferredSize(new java.awt.Dimension(29, 100));
        jPanel_LipsPos.add(jSlider_LowerLip, new java.awt.GridBagConstraints());

        jSpinner_UpperLip.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_UpperLip.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_LipsPos.add(jSpinner_UpperLip, gridBagConstraints);

        jSpinner_LowerLip.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_LowerLip.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel_LipsPos.add(jSpinner_LowerLip, gridBagConstraints);

        jPanel_Mouth.add(jPanel_LipsPos, new java.awt.GridBagConstraints());

        jPanel_MouthWidth.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Mouth Width", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel_MouthWidth.setMinimumSize(new java.awt.Dimension(210, 190));
        jPanel_MouthWidth.setPreferredSize(new java.awt.Dimension(210, 190));
        jPanel_MouthWidth.setLayout(new java.awt.GridBagLayout());

        jSlider_MouthWidth.setPaintTicks(true);
        jSlider_MouthWidth.setSnapToTicks(true);
        jPanel_MouthWidth.add(jSlider_MouthWidth, new java.awt.GridBagConstraints());

        jSpinner_MouthWidth.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_MouthWidth.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_MouthWidth.add(jSpinner_MouthWidth, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_Mouth.add(jPanel_MouthWidth, gridBagConstraints);

        jPanel_MouthScaling.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Scaling", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel_MouthScaling.setMinimumSize(new java.awt.Dimension(210, 144));
        jPanel_MouthScaling.setPreferredSize(new java.awt.Dimension(210, 144));
        jPanel_MouthScaling.setLayout(new java.awt.GridBagLayout());

        jLabel_MouthX.setText("X");
        jPanel_MouthScaling.add(jLabel_MouthX, new java.awt.GridBagConstraints());

        jSlider_MouthX.setPaintTicks(true);
        jSlider_MouthX.setSnapToTicks(true);
        jSlider_MouthX.setMinimumSize(new java.awt.Dimension(170, 29));
        jPanel_MouthScaling.add(jSlider_MouthX, new java.awt.GridBagConstraints());

        jLabel_MouthY.setText("Y");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_MouthScaling.add(jLabel_MouthY, gridBagConstraints);

        jSlider_MouthY.setPaintTicks(true);
        jSlider_MouthY.setSnapToTicks(true);
        jSlider_MouthY.setMinimumSize(new java.awt.Dimension(170, 29));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel_MouthScaling.add(jSlider_MouthY, gridBagConstraints);

        jLabel_MouthZ.setText("Z");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        jPanel_MouthScaling.add(jLabel_MouthZ, gridBagConstraints);

        jSlider_MouthZ.setPaintTicks(true);
        jSlider_MouthZ.setSnapToTicks(true);
        jSlider_MouthZ.setMinimumSize(new java.awt.Dimension(170, 29));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        jPanel_MouthScaling.add(jSlider_MouthZ, gridBagConstraints);

        jLabel_MouthU.setText("U");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        jPanel_MouthScaling.add(jLabel_MouthU, gridBagConstraints);

        jSlider_MouthU.setPaintTicks(true);
        jSlider_MouthU.setSnapToTicks(true);
        jSlider_MouthU.setMinimumSize(new java.awt.Dimension(170, 29));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        jPanel_MouthScaling.add(jSlider_MouthU, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel_Mouth.add(jPanel_MouthScaling, gridBagConstraints);

        jTabbedPane_Head.addTab("Mouth", jPanel_Mouth);

        jPanel_UniformHead.setPreferredSize(new java.awt.Dimension(200, 300));
        jPanel_UniformHead.setLayout(new java.awt.GridBagLayout());

        jPanel_HeadWidth.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Width Scale", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel_HeadWidth.setMinimumSize(new java.awt.Dimension(210, 115));
        jPanel_HeadWidth.setPreferredSize(new java.awt.Dimension(210, 115));
        jPanel_HeadWidth.setLayout(new java.awt.GridBagLayout());

        jSlider_HeadWidth.setPaintTicks(true);
        jSlider_HeadWidth.setSnapToTicks(true);
        jPanel_HeadWidth.add(jSlider_HeadWidth, new java.awt.GridBagConstraints());

        jSpinner_HeadWidth.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_HeadWidth.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_HeadWidth.add(jSpinner_HeadWidth, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel_UniformHead.add(jPanel_HeadWidth, gridBagConstraints);

        jPanel_HeadHeight.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Height Scale", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel_HeadHeight.setMinimumSize(new java.awt.Dimension(210, 180));
        jPanel_HeadHeight.setPreferredSize(new java.awt.Dimension(210, 180));
        jPanel_HeadHeight.setLayout(new java.awt.GridBagLayout());

        jSlider_HeadHeight.setOrientation(javax.swing.JSlider.VERTICAL);
        jSlider_HeadHeight.setPaintTicks(true);
        jSlider_HeadHeight.setSnapToTicks(true);
        jSlider_HeadHeight.setMinimumSize(new java.awt.Dimension(29, 100));
        jSlider_HeadHeight.setPreferredSize(new java.awt.Dimension(29, 100));
        jPanel_HeadHeight.add(jSlider_HeadHeight, new java.awt.GridBagConstraints());

        jSpinner_HeadHeight.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_HeadHeight.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_HeadHeight.add(jSpinner_HeadHeight, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel_UniformHead.add(jPanel_HeadHeight, gridBagConstraints);

        jPanel_HeadDepth.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Depth Scale", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel_HeadDepth.setMinimumSize(new java.awt.Dimension(210, 115));
        jPanel_HeadDepth.setPreferredSize(new java.awt.Dimension(210, 115));
        jPanel_HeadDepth.setLayout(new java.awt.GridBagLayout());

        jSlider_HeadDepth.setPaintTicks(true);
        jSlider_HeadDepth.setSnapToTicks(true);
        jPanel_HeadDepth.add(jSlider_HeadDepth, new java.awt.GridBagConstraints());

        jSpinner_HeadDepth.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_HeadDepth.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_HeadDepth.add(jSpinner_HeadDepth, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel_UniformHead.add(jPanel_HeadDepth, gridBagConstraints);

        jPanel_HeadUniform.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Uniform Scale", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel_HeadUniform.setMinimumSize(new java.awt.Dimension(210, 115));
        jPanel_HeadUniform.setPreferredSize(new java.awt.Dimension(210, 115));
        jPanel_HeadUniform.setLayout(new java.awt.GridBagLayout());

        jSlider_HeadUniform.setPaintTicks(true);
        jSlider_HeadUniform.setSnapToTicks(true);
        jPanel_HeadUniform.add(jSlider_HeadUniform, new java.awt.GridBagConstraints());

        jSpinner_HeadUniform.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_HeadUniform.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_HeadUniform.add(jSpinner_HeadUniform, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel_UniformHead.add(jPanel_HeadUniform, gridBagConstraints);

        jTabbedPane_Head.addTab("Uniform", jPanel_UniformHead);

        jPanel_MainHead.add(jTabbedPane_Head, new java.awt.GridBagConstraints());

        jTabbedPane_Main.addTab("Head", jPanel_MainHead);

        jPanel_MainArmsHands.setPreferredSize(new java.awt.Dimension(260, 600));
        jPanel_MainArmsHands.setLayout(new java.awt.GridBagLayout());

        jTabbedPane_ArmsHands.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jTabbedPane_ArmsHands.setMinimumSize(new java.awt.Dimension(262, 560));
        jTabbedPane_ArmsHands.setPreferredSize(new java.awt.Dimension(262, 560));

        jPanel_Hands.setPreferredSize(new java.awt.Dimension(216, 500));
        jPanel_Hands.setLayout(new java.awt.GridBagLayout());

        jPanel_FingerLength.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Finger Length", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel_FingerLength.setMinimumSize(new java.awt.Dimension(210, 260));
        jPanel_FingerLength.setPreferredSize(new java.awt.Dimension(210, 260));
        jPanel_FingerLength.setLayout(new java.awt.GridBagLayout());

        jSlider_FingerLengthR.setMaximum(20);
        jSlider_FingerLengthR.setMinimum(1);
        jSlider_FingerLengthR.setMinorTickSpacing(1);
        jSlider_FingerLengthR.setOrientation(javax.swing.JSlider.VERTICAL);
        jSlider_FingerLengthR.setPaintTicks(true);
        jSlider_FingerLengthR.setSnapToTicks(true);
        jSlider_FingerLengthR.setValue(10);
        jSlider_FingerLengthR.setMinimumSize(new java.awt.Dimension(29, 100));
        jSlider_FingerLengthR.setPreferredSize(new java.awt.Dimension(29, 100));
        jSlider_FingerLengthR.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent e) {
                adjustHands(0, e);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel_FingerLength.add(jSlider_FingerLengthR, gridBagConstraints);

        jSlider_FingerLengthL.setMaximum(20);
        jSlider_FingerLengthL.setMinimum(1);
        jSlider_FingerLengthL.setMinorTickSpacing(1);
        jSlider_FingerLengthL.setOrientation(javax.swing.JSlider.VERTICAL);
        jSlider_FingerLengthL.setPaintTicks(true);
        jSlider_FingerLengthL.setSnapToTicks(true);
        jSlider_FingerLengthL.setValue(10);
        jSlider_FingerLengthL.setMinimumSize(new java.awt.Dimension(29, 100));
        jSlider_FingerLengthL.setPreferredSize(new java.awt.Dimension(29, 100));
        jSlider_FingerLengthL.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent e) {
                adjustHands(0, e);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel_FingerLength.add(jSlider_FingerLengthL, gridBagConstraints);

        jCheckBox_HandsLenSync.setText("Sync");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        jPanel_FingerLength.add(jCheckBox_HandsLenSync, gridBagConstraints);

        jSpinner_FingerLengthR.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_FingerLengthR.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_FingerLength.add(jSpinner_FingerLengthR, gridBagConstraints);

        jSpinner_FingerLengthL.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_FingerLengthL.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel_FingerLength.add(jSpinner_FingerLengthL, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel_Hands.add(jPanel_FingerLength, gridBagConstraints);

        jPanel_HandThickness.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Hand Thickness", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 204))); // NOI18N
        jPanel_HandThickness.setMinimumSize(new java.awt.Dimension(210, 260));
        jPanel_HandThickness.setPreferredSize(new java.awt.Dimension(210, 260));
        jPanel_HandThickness.setLayout(new java.awt.GridBagLayout());

        jSlider_HandThicknessR.setMaximum(40);
        jSlider_HandThicknessR.setMinimum(1);
        jSlider_HandThicknessR.setMinorTickSpacing(1);
        jSlider_HandThicknessR.setPaintTicks(true);
        jSlider_HandThicknessR.setSnapToTicks(true);
        jSlider_HandThicknessR.setValue(20);
        jSlider_HandThicknessR.setMinimumSize(new java.awt.Dimension(100, 29));
        jSlider_HandThicknessR.setPreferredSize(new java.awt.Dimension(100, 29));
        jSlider_HandThicknessR.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent e) {
                adjustHands(1, e);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel_HandThickness.add(jSlider_HandThicknessR, gridBagConstraints);

        jSlider_HandThicknessL.setMaximum(40);
        jSlider_HandThicknessL.setMinimum(1);
        jSlider_HandThicknessL.setMinorTickSpacing(1);
        jSlider_HandThicknessL.setPaintTicks(true);
        jSlider_HandThicknessL.setSnapToTicks(true);
        jSlider_HandThicknessL.setValue(20);
        jSlider_HandThicknessL.setMinimumSize(new java.awt.Dimension(100, 29));
        jSlider_HandThicknessL.setPreferredSize(new java.awt.Dimension(100, 29));
        jSlider_HandThicknessL.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent e) {
                adjustHands(1, e);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel_HandThickness.add(jSlider_HandThicknessL, gridBagConstraints);

        jCheckBox_HandThickSync.setText("Sync");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        jPanel_HandThickness.add(jCheckBox_HandThickSync, gridBagConstraints);

        jSpinner_HandThicknessL.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(-1.2f), Float.valueOf(1.2f), Float.valueOf(0.01f)));
        jSpinner_HandThicknessL.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_HandThicknessL.setPreferredSize(new java.awt.Dimension(75, 28));
        jSpinner_HandThicknessL.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent e) {
                adjustHands(1, e);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel_HandThickness.add(jSpinner_HandThicknessL, gridBagConstraints);

        jSpinner_HandThicknessR.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(-1.2f), Float.valueOf(1.2f), Float.valueOf(0.01f)));
        jSpinner_HandThicknessR.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_HandThicknessR.setPreferredSize(new java.awt.Dimension(75, 28));
        jSpinner_HandThicknessR.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent e) {
                adjustHands(1, e);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_HandThickness.add(jSpinner_HandThicknessR, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel_Hands.add(jPanel_HandThickness, gridBagConstraints);

        jTabbedPane_ArmsHands.addTab("Hands", jPanel_Hands);

        jPanel_Forearms.setLayout(new java.awt.GridBagLayout());

        jPanel_ForearmLength.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Forearm Length", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel_ForearmLength.setMinimumSize(new java.awt.Dimension(210, 260));
        jPanel_ForearmLength.setPreferredSize(new java.awt.Dimension(210, 260));
        jPanel_ForearmLength.setLayout(new java.awt.GridBagLayout());

        jSlider_ForearmLengthR.setMaximum(20);
        jSlider_ForearmLengthR.setMinimum(1);
        jSlider_ForearmLengthR.setMinorTickSpacing(1);
        jSlider_ForearmLengthR.setOrientation(javax.swing.JSlider.VERTICAL);
        jSlider_ForearmLengthR.setPaintTicks(true);
        jSlider_ForearmLengthR.setSnapToTicks(true);
        jSlider_ForearmLengthR.setValue(10);
        jSlider_ForearmLengthR.setMinimumSize(new java.awt.Dimension(29, 100));
        jSlider_ForearmLengthR.setPreferredSize(new java.awt.Dimension(29, 100));
        jSlider_ForearmLengthR.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent e) {
                adjustForearms(0, e);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel_ForearmLength.add(jSlider_ForearmLengthR, gridBagConstraints);

        jSlider_ForearmLengthL.setMaximum(20);
        jSlider_ForearmLengthL.setMinimum(1);
        jSlider_ForearmLengthL.setMinorTickSpacing(1);
        jSlider_ForearmLengthL.setOrientation(javax.swing.JSlider.VERTICAL);
        jSlider_ForearmLengthL.setPaintTicks(true);
        jSlider_ForearmLengthL.setSnapToTicks(true);
        jSlider_ForearmLengthL.setValue(10);
        jSlider_ForearmLengthL.setMinimumSize(new java.awt.Dimension(29, 100));
        jSlider_ForearmLengthL.setPreferredSize(new java.awt.Dimension(29, 100));
        jSlider_ForearmLengthL.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent e) {
                adjustForearms(0, e);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel_ForearmLength.add(jSlider_ForearmLengthL, gridBagConstraints);

        jCheckBox_ForearmLenSync.setText("Sync");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        jPanel_ForearmLength.add(jCheckBox_ForearmLenSync, gridBagConstraints);

        jSpinner_ForearmLengthL.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_ForearmLengthL.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel_ForearmLength.add(jSpinner_ForearmLengthL, gridBagConstraints);

        jSpinner_ForearmLengthR.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_ForearmLengthR.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_ForearmLength.add(jSpinner_ForearmLengthR, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel_Forearms.add(jPanel_ForearmLength, gridBagConstraints);

        jPanel_ForearmThickness.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Forearm Thickness", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 204))); // NOI18N
        jPanel_ForearmThickness.setMinimumSize(new java.awt.Dimension(210, 260));
        jPanel_ForearmThickness.setPreferredSize(new java.awt.Dimension(210, 260));
        jPanel_ForearmThickness.setLayout(new java.awt.GridBagLayout());

        jSlider_ForearmThicknessR.setMaximum(40);
        jSlider_ForearmThicknessR.setMinimum(1);
        jSlider_ForearmThicknessR.setMinorTickSpacing(1);
        jSlider_ForearmThicknessR.setPaintTicks(true);
        jSlider_ForearmThicknessR.setSnapToTicks(true);
        jSlider_ForearmThicknessR.setValue(20);
        jSlider_ForearmThicknessR.setMinimumSize(new java.awt.Dimension(100, 29));
        jSlider_ForearmThicknessR.setPreferredSize(new java.awt.Dimension(100, 29));
        jSlider_ForearmThicknessR.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent e) {
                adjustForearms(1, e);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel_ForearmThickness.add(jSlider_ForearmThicknessR, gridBagConstraints);

        jSlider_ForearmThicknessL.setMaximum(40);
        jSlider_ForearmThicknessL.setMinimum(1);
        jSlider_ForearmThicknessL.setMinorTickSpacing(1);
        jSlider_ForearmThicknessL.setPaintTicks(true);
        jSlider_ForearmThicknessL.setSnapToTicks(true);
        jSlider_ForearmThicknessL.setValue(20);
        jSlider_ForearmThicknessL.setMinimumSize(new java.awt.Dimension(100, 29));
        jSlider_ForearmThicknessL.setPreferredSize(new java.awt.Dimension(100, 29));
        jSlider_ForearmThicknessL.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent e) {
                adjustForearms(1, e);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel_ForearmThickness.add(jSlider_ForearmThicknessL, gridBagConstraints);

        jCheckBox_ForearmThickSync.setText("Sync");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        jPanel_ForearmThickness.add(jCheckBox_ForearmThickSync, gridBagConstraints);

        jSpinner_ForearmThicknessL.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(-1.2f), Float.valueOf(1.2f), Float.valueOf(0.01f)));
        jSpinner_ForearmThicknessL.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_ForearmThicknessL.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel_ForearmThickness.add(jSpinner_ForearmThicknessL, gridBagConstraints);

        jSpinner_ForearmThicknessR.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(-1.2f), Float.valueOf(1.2f), Float.valueOf(0.01f)));
        jSpinner_ForearmThicknessR.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_ForearmThicknessR.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_ForearmThickness.add(jSpinner_ForearmThicknessR, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel_Forearms.add(jPanel_ForearmThickness, gridBagConstraints);

        jTabbedPane_ArmsHands.addTab("Forearms", jPanel_Forearms);

        jPanel_UpperArms.setLayout(new java.awt.GridBagLayout());

        jPanel_UpperarmLength.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Upperarm Length", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel_UpperarmLength.setMinimumSize(new java.awt.Dimension(210, 260));
        jPanel_UpperarmLength.setPreferredSize(new java.awt.Dimension(210, 260));
        jPanel_UpperarmLength.setLayout(new java.awt.GridBagLayout());

        jSlider_UpperarmLengthR.setMaximum(20);
        jSlider_UpperarmLengthR.setMinimum(1);
        jSlider_UpperarmLengthR.setMinorTickSpacing(1);
        jSlider_UpperarmLengthR.setOrientation(javax.swing.JSlider.VERTICAL);
        jSlider_UpperarmLengthR.setPaintTicks(true);
        jSlider_UpperarmLengthR.setSnapToTicks(true);
        jSlider_UpperarmLengthR.setValue(10);
        jSlider_UpperarmLengthR.setMinimumSize(new java.awt.Dimension(29, 100));
        jSlider_UpperarmLengthR.setPreferredSize(new java.awt.Dimension(29, 100));
        jSlider_UpperarmLengthR.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent e) {
                adjustUpperarms(0, e);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel_UpperarmLength.add(jSlider_UpperarmLengthR, gridBagConstraints);

        jSlider_UpperArmLengthL.setMaximum(20);
        jSlider_UpperArmLengthL.setMinimum(1);
        jSlider_UpperArmLengthL.setMinorTickSpacing(1);
        jSlider_UpperArmLengthL.setOrientation(javax.swing.JSlider.VERTICAL);
        jSlider_UpperArmLengthL.setPaintTicks(true);
        jSlider_UpperArmLengthL.setSnapToTicks(true);
        jSlider_UpperArmLengthL.setValue(10);
        jSlider_UpperArmLengthL.setMinimumSize(new java.awt.Dimension(29, 100));
        jSlider_UpperArmLengthL.setPreferredSize(new java.awt.Dimension(29, 100));
        jSlider_UpperArmLengthL.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent e) {
                adjustUpperarms(0, e);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel_UpperarmLength.add(jSlider_UpperArmLengthL, gridBagConstraints);

        jCheckBox_UpperarmLenSync.setText("Sync");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        jPanel_UpperarmLength.add(jCheckBox_UpperarmLenSync, gridBagConstraints);

        jSpinner_UpperarmLengthL.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(-0.1f), Float.valueOf(0.1f), Float.valueOf(0.01f)));
        jSpinner_UpperarmLengthL.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_UpperarmLengthL.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel_UpperarmLength.add(jSpinner_UpperarmLengthL, gridBagConstraints);

        jSpinner_UpperarmLengthR.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(-0.1f), Float.valueOf(0.1f), Float.valueOf(0.01f)));
        jSpinner_UpperarmLengthR.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_UpperarmLengthR.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_UpperarmLength.add(jSpinner_UpperarmLengthR, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel_UpperArms.add(jPanel_UpperarmLength, gridBagConstraints);

        jPanel_UpperarmThickness.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Upperarm Thickness", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 204))); // NOI18N
        jPanel_UpperarmThickness.setMinimumSize(new java.awt.Dimension(210, 260));
        jPanel_UpperarmThickness.setPreferredSize(new java.awt.Dimension(210, 260));
        jPanel_UpperarmThickness.setLayout(new java.awt.GridBagLayout());

        jSlider_UpperarmThicknessR.setMaximum(40);
        jSlider_UpperarmThicknessR.setMinimum(1);
        jSlider_UpperarmThicknessR.setMinorTickSpacing(1);
        jSlider_UpperarmThicknessR.setPaintTicks(true);
        jSlider_UpperarmThicknessR.setSnapToTicks(true);
        jSlider_UpperarmThicknessR.setValue(20);
        jSlider_UpperarmThicknessR.setMinimumSize(new java.awt.Dimension(100, 29));
        jSlider_UpperarmThicknessR.setPreferredSize(new java.awt.Dimension(100, 29));
        jSlider_UpperarmThicknessR.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent e) {
                adjustUpperarms(1, e);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel_UpperarmThickness.add(jSlider_UpperarmThicknessR, gridBagConstraints);

        jSlider_UpperarmThicknessL.setMaximum(40);
        jSlider_UpperarmThicknessL.setMinimum(1);
        jSlider_UpperarmThicknessL.setMinorTickSpacing(1);
        jSlider_UpperarmThicknessL.setPaintTicks(true);
        jSlider_UpperarmThicknessL.setSnapToTicks(true);
        jSlider_UpperarmThicknessL.setValue(20);
        jSlider_UpperarmThicknessL.setMinimumSize(new java.awt.Dimension(100, 29));
        jSlider_UpperarmThicknessL.setPreferredSize(new java.awt.Dimension(100, 29));
        jSlider_UpperarmThicknessL.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent e) {
                adjustUpperarms(1, e);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel_UpperarmThickness.add(jSlider_UpperarmThicknessL, gridBagConstraints);

        jCheckBox_UpperarmThickSync.setText("Sync");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        jPanel_UpperarmThickness.add(jCheckBox_UpperarmThickSync, gridBagConstraints);

        jSpinner_UpperarmThicknessL.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(-1.2f), Float.valueOf(1.2f), Float.valueOf(0.01f)));
        jSpinner_UpperarmThicknessL.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_UpperarmThicknessL.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel_UpperarmThickness.add(jSpinner_UpperarmThicknessL, gridBagConstraints);

        jSpinner_UpperarmThicknessR.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(-1.2f), Float.valueOf(1.2f), Float.valueOf(0.01f)));
        jSpinner_UpperarmThicknessR.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_UpperarmThicknessR.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_UpperarmThickness.add(jSpinner_UpperarmThicknessR, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel_UpperArms.add(jPanel_UpperarmThickness, gridBagConstraints);

        jTabbedPane_ArmsHands.addTab("UpperArms", jPanel_UpperArms);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel_MainArmsHands.add(jTabbedPane_ArmsHands, gridBagConstraints);

        jTabbedPane_Main.addTab("Arms/Hands", jPanel_MainArmsHands);

        jPanel_MainLegsFeet.setPreferredSize(new java.awt.Dimension(260, 600));
        jPanel_MainLegsFeet.setLayout(new java.awt.GridBagLayout());

        jTabbedPane_LegsFeet.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jTabbedPane_LegsFeet.setMinimumSize(new java.awt.Dimension(262, 560));
        jTabbedPane_LegsFeet.setPreferredSize(new java.awt.Dimension(262, 560));

        jPanel_Feet.setLayout(new java.awt.GridBagLayout());

        jPanel_FeetLength.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Feet Length", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel_FeetLength.setMinimumSize(new java.awt.Dimension(210, 260));
        jPanel_FeetLength.setPreferredSize(new java.awt.Dimension(210, 260));
        jPanel_FeetLength.setLayout(new java.awt.GridBagLayout());

        jSlider_FeetLengthR.setMaximum(20);
        jSlider_FeetLengthR.setMinimum(1);
        jSlider_FeetLengthR.setMinorTickSpacing(1);
        jSlider_FeetLengthR.setOrientation(javax.swing.JSlider.VERTICAL);
        jSlider_FeetLengthR.setPaintTicks(true);
        jSlider_FeetLengthR.setSnapToTicks(true);
        jSlider_FeetLengthR.setValue(10);
        jSlider_FeetLengthR.setMinimumSize(new java.awt.Dimension(29, 100));
        jSlider_FeetLengthR.setPreferredSize(new java.awt.Dimension(29, 100));
        jSlider_FeetLengthR.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent e) {
                adjustFeet(0, e);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel_FeetLength.add(jSlider_FeetLengthR, gridBagConstraints);

        jSlider_FeetLengthL.setMaximum(20);
        jSlider_FeetLengthL.setMinimum(1);
        jSlider_FeetLengthL.setMinorTickSpacing(1);
        jSlider_FeetLengthL.setOrientation(javax.swing.JSlider.VERTICAL);
        jSlider_FeetLengthL.setPaintTicks(true);
        jSlider_FeetLengthL.setSnapToTicks(true);
        jSlider_FeetLengthL.setValue(10);
        jSlider_FeetLengthL.setMinimumSize(new java.awt.Dimension(29, 100));
        jSlider_FeetLengthL.setPreferredSize(new java.awt.Dimension(29, 100));
        jSlider_FeetLengthL.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent e) {
                adjustFeet(0, e);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel_FeetLength.add(jSlider_FeetLengthL, gridBagConstraints);

        jCheckBox_FeetLenSync.setText("Sync");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        jPanel_FeetLength.add(jCheckBox_FeetLenSync, gridBagConstraints);

        jSpinner_FeetLengthL.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(-0.1f), Float.valueOf(0.1f), Float.valueOf(0.01f)));
        jSpinner_FeetLengthL.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_FeetLengthL.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel_FeetLength.add(jSpinner_FeetLengthL, gridBagConstraints);

        jSpinner_FeetLengthR.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(-0.1f), Float.valueOf(0.1f), Float.valueOf(0.01f)));
        jSpinner_FeetLengthR.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_FeetLengthR.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_FeetLength.add(jSpinner_FeetLengthR, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel_Feet.add(jPanel_FeetLength, gridBagConstraints);

        jPanel_FeetThickness.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Feet Thickness", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 204))); // NOI18N
        jPanel_FeetThickness.setMinimumSize(new java.awt.Dimension(210, 260));
        jPanel_FeetThickness.setPreferredSize(new java.awt.Dimension(210, 260));
        jPanel_FeetThickness.setLayout(new java.awt.GridBagLayout());

        jSlider_FeetThicknessR.setMaximum(40);
        jSlider_FeetThicknessR.setMinimum(1);
        jSlider_FeetThicknessR.setMinorTickSpacing(1);
        jSlider_FeetThicknessR.setPaintTicks(true);
        jSlider_FeetThicknessR.setSnapToTicks(true);
        jSlider_FeetThicknessR.setValue(20);
        jSlider_FeetThicknessR.setMinimumSize(new java.awt.Dimension(100, 29));
        jSlider_FeetThicknessR.setPreferredSize(new java.awt.Dimension(100, 29));
        jSlider_FeetThicknessR.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent e) {
                adjustFeet(1, e);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel_FeetThickness.add(jSlider_FeetThicknessR, gridBagConstraints);

        jSlider_FeetThicknessL.setMaximum(40);
        jSlider_FeetThicknessL.setMinimum(1);
        jSlider_FeetThicknessL.setMinorTickSpacing(1);
        jSlider_FeetThicknessL.setPaintTicks(true);
        jSlider_FeetThicknessL.setSnapToTicks(true);
        jSlider_FeetThicknessL.setValue(20);
        jSlider_FeetThicknessL.setMinimumSize(new java.awt.Dimension(100, 29));
        jSlider_FeetThicknessL.setPreferredSize(new java.awt.Dimension(100, 29));
        jSlider_FeetThicknessL.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent e) {
                adjustFeet(1, e);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel_FeetThickness.add(jSlider_FeetThicknessL, gridBagConstraints);

        jCheckBox_FeetThickSync.setText("Sync");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        jPanel_FeetThickness.add(jCheckBox_FeetThickSync, gridBagConstraints);

        jSpinner_FeetThicknessL.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(-1.2f), Float.valueOf(1.2f), Float.valueOf(0.01f)));
        jSpinner_FeetThicknessL.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_FeetThicknessL.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel_FeetThickness.add(jSpinner_FeetThicknessL, gridBagConstraints);

        jSpinner_FeetThicknessR.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(-1.2f), Float.valueOf(1.2f), Float.valueOf(0.01f)));
        jSpinner_FeetThicknessR.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_FeetThicknessR.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_FeetThickness.add(jSpinner_FeetThicknessR, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel_Feet.add(jPanel_FeetThickness, gridBagConstraints);

        jTabbedPane_LegsFeet.addTab("Feet", jPanel_Feet);

        jPanel_Calves.setLayout(new java.awt.GridBagLayout());

        jPanel_CalvesLength.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Calves Length", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel_CalvesLength.setMinimumSize(new java.awt.Dimension(210, 260));
        jPanel_CalvesLength.setPreferredSize(new java.awt.Dimension(210, 260));
        jPanel_CalvesLength.setLayout(new java.awt.GridBagLayout());

        jSlider_CalvesLengthR.setMaximum(20);
        jSlider_CalvesLengthR.setMinimum(1);
        jSlider_CalvesLengthR.setMinorTickSpacing(1);
        jSlider_CalvesLengthR.setOrientation(javax.swing.JSlider.VERTICAL);
        jSlider_CalvesLengthR.setPaintTicks(true);
        jSlider_CalvesLengthR.setSnapToTicks(true);
        jSlider_CalvesLengthR.setValue(10);
        jSlider_CalvesLengthR.setMinimumSize(new java.awt.Dimension(29, 100));
        jSlider_CalvesLengthR.setPreferredSize(new java.awt.Dimension(29, 100));
        jSlider_CalvesLengthR.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent e) {
                adjustCalves(0, e);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel_CalvesLength.add(jSlider_CalvesLengthR, gridBagConstraints);

        jSlider_CalvesLengthL.setMaximum(20);
        jSlider_CalvesLengthL.setMinimum(1);
        jSlider_CalvesLengthL.setMinorTickSpacing(1);
        jSlider_CalvesLengthL.setOrientation(javax.swing.JSlider.VERTICAL);
        jSlider_CalvesLengthL.setPaintTicks(true);
        jSlider_CalvesLengthL.setSnapToTicks(true);
        jSlider_CalvesLengthL.setValue(10);
        jSlider_CalvesLengthL.setMinimumSize(new java.awt.Dimension(29, 100));
        jSlider_CalvesLengthL.setPreferredSize(new java.awt.Dimension(29, 100));
        jSlider_CalvesLengthL.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent e) {
                adjustCalves(0, e);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel_CalvesLength.add(jSlider_CalvesLengthL, gridBagConstraints);

        jCheckBox_CalvesLenSync.setText("Sync");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        jPanel_CalvesLength.add(jCheckBox_CalvesLenSync, gridBagConstraints);

        jSpinner_CalvesLengthL.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(-0.1f), Float.valueOf(0.1f), Float.valueOf(0.01f)));
        jSpinner_CalvesLengthL.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_CalvesLengthL.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel_CalvesLength.add(jSpinner_CalvesLengthL, gridBagConstraints);

        jSpinner_CalvesLengthR.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(-0.1f), Float.valueOf(0.1f), Float.valueOf(0.01f)));
        jSpinner_CalvesLengthR.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_CalvesLengthR.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_CalvesLength.add(jSpinner_CalvesLengthR, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel_Calves.add(jPanel_CalvesLength, gridBagConstraints);

        jPanel_CalvesThickness.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Calves Thickness", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 204))); // NOI18N
        jPanel_CalvesThickness.setMinimumSize(new java.awt.Dimension(210, 260));
        jPanel_CalvesThickness.setPreferredSize(new java.awt.Dimension(210, 260));
        jPanel_CalvesThickness.setLayout(new java.awt.GridBagLayout());

        jSlider_CalvesThicknessR.setMaximum(40);
        jSlider_CalvesThicknessR.setMinimum(1);
        jSlider_CalvesThicknessR.setMinorTickSpacing(1);
        jSlider_CalvesThicknessR.setPaintTicks(true);
        jSlider_CalvesThicknessR.setSnapToTicks(true);
        jSlider_CalvesThicknessR.setValue(20);
        jSlider_CalvesThicknessR.setMinimumSize(new java.awt.Dimension(100, 29));
        jSlider_CalvesThicknessR.setPreferredSize(new java.awt.Dimension(100, 29));
        jSlider_CalvesThicknessR.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent e) {
                adjustCalves(1, e);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel_CalvesThickness.add(jSlider_CalvesThicknessR, gridBagConstraints);

        jSlider_CalvesThicknessL.setMaximum(40);
        jSlider_CalvesThicknessL.setMinimum(1);
        jSlider_CalvesThicknessL.setMinorTickSpacing(1);
        jSlider_CalvesThicknessL.setPaintTicks(true);
        jSlider_CalvesThicknessL.setSnapToTicks(true);
        jSlider_CalvesThicknessL.setValue(20);
        jSlider_CalvesThicknessL.setMinimumSize(new java.awt.Dimension(100, 29));
        jSlider_CalvesThicknessL.setPreferredSize(new java.awt.Dimension(100, 29));
        jSlider_CalvesThicknessL.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent e) {
                adjustCalves(1, e);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel_CalvesThickness.add(jSlider_CalvesThicknessL, gridBagConstraints);

        jCheckBox_CalvesThickSync.setText("Sync");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        jPanel_CalvesThickness.add(jCheckBox_CalvesThickSync, gridBagConstraints);

        jSpinner_CalvesThicknessL.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(-1.2f), Float.valueOf(1.2f), Float.valueOf(0.01f)));
        jSpinner_CalvesThicknessL.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_CalvesThicknessL.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel_CalvesThickness.add(jSpinner_CalvesThicknessL, gridBagConstraints);

        jSpinner_CalvesThicknessR.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(-1.2f), Float.valueOf(1.2f), Float.valueOf(0.01f)));
        jSpinner_CalvesThicknessR.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_CalvesThicknessR.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_CalvesThickness.add(jSpinner_CalvesThicknessR, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel_Calves.add(jPanel_CalvesThickness, gridBagConstraints);

        jTabbedPane_LegsFeet.addTab("Calves", jPanel_Calves);

        jPanel_Thighs.setLayout(new java.awt.GridBagLayout());

        jPanel_ThighLength.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thigh Length", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel_ThighLength.setMinimumSize(new java.awt.Dimension(210, 260));
        jPanel_ThighLength.setPreferredSize(new java.awt.Dimension(210, 260));
        jPanel_ThighLength.setLayout(new java.awt.GridBagLayout());

        jSlider_ThighLengthR.setMaximum(20);
        jSlider_ThighLengthR.setMinimum(1);
        jSlider_ThighLengthR.setMinorTickSpacing(1);
        jSlider_ThighLengthR.setOrientation(javax.swing.JSlider.VERTICAL);
        jSlider_ThighLengthR.setPaintTicks(true);
        jSlider_ThighLengthR.setSnapToTicks(true);
        jSlider_ThighLengthR.setValue(10);
        jSlider_ThighLengthR.setMinimumSize(new java.awt.Dimension(29, 100));
        jSlider_ThighLengthR.setPreferredSize(new java.awt.Dimension(29, 100));
        jSlider_ThighLengthR.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent e) {
                adjustThighs(0, e);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel_ThighLength.add(jSlider_ThighLengthR, gridBagConstraints);

        jSlider_ThighLengthL.setMaximum(20);
        jSlider_ThighLengthL.setMinimum(1);
        jSlider_ThighLengthL.setMinorTickSpacing(1);
        jSlider_ThighLengthL.setOrientation(javax.swing.JSlider.VERTICAL);
        jSlider_ThighLengthL.setPaintTicks(true);
        jSlider_ThighLengthL.setSnapToTicks(true);
        jSlider_ThighLengthL.setValue(10);
        jSlider_ThighLengthL.setMinimumSize(new java.awt.Dimension(29, 100));
        jSlider_ThighLengthL.setPreferredSize(new java.awt.Dimension(29, 100));
        jSlider_ThighLengthL.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent e) {
                adjustThighs(0, e);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel_ThighLength.add(jSlider_ThighLengthL, gridBagConstraints);

        jCheckBox_ThighLenSync.setText("Sync");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        jPanel_ThighLength.add(jCheckBox_ThighLenSync, gridBagConstraints);

        jSpinner_ThighLengthL.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(-0.1f), Float.valueOf(0.1f), Float.valueOf(0.01f)));
        jSpinner_ThighLengthL.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_ThighLengthL.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel_ThighLength.add(jSpinner_ThighLengthL, gridBagConstraints);

        jSpinner_ThighLengthR.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(-0.1f), Float.valueOf(0.1f), Float.valueOf(0.01f)));
        jSpinner_ThighLengthR.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_ThighLengthR.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_ThighLength.add(jSpinner_ThighLengthR, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel_Thighs.add(jPanel_ThighLength, gridBagConstraints);

        jPanel_ThighThickness.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thigh Thickness", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 204))); // NOI18N
        jPanel_ThighThickness.setMinimumSize(new java.awt.Dimension(210, 260));
        jPanel_ThighThickness.setPreferredSize(new java.awt.Dimension(210, 260));
        jPanel_ThighThickness.setLayout(new java.awt.GridBagLayout());

        jSlider_ThighThicknessR.setMaximum(40);
        jSlider_ThighThicknessR.setMinimum(1);
        jSlider_ThighThicknessR.setMinorTickSpacing(1);
        jSlider_ThighThicknessR.setPaintTicks(true);
        jSlider_ThighThicknessR.setSnapToTicks(true);
        jSlider_ThighThicknessR.setValue(20);
        jSlider_ThighThicknessR.setMinimumSize(new java.awt.Dimension(100, 29));
        jSlider_ThighThicknessR.setPreferredSize(new java.awt.Dimension(100, 29));
        jSlider_ThighThicknessR.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent e) {
                adjustThighs(1, e);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel_ThighThickness.add(jSlider_ThighThicknessR, gridBagConstraints);

        jSlider_ThighThicknessL.setMaximum(40);
        jSlider_ThighThicknessL.setMinimum(1);
        jSlider_ThighThicknessL.setMinorTickSpacing(1);
        jSlider_ThighThicknessL.setPaintTicks(true);
        jSlider_ThighThicknessL.setSnapToTicks(true);
        jSlider_ThighThicknessL.setValue(20);
        jSlider_ThighThicknessL.setMinimumSize(new java.awt.Dimension(100, 29));
        jSlider_ThighThicknessL.setPreferredSize(new java.awt.Dimension(100, 29));
        jSlider_ThighThicknessL.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent e) {
                adjustThighs(1, e);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel_ThighThickness.add(jSlider_ThighThicknessL, gridBagConstraints);

        jCheckBox_ThighThickSync.setText("Sync");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        jPanel_ThighThickness.add(jCheckBox_ThighThickSync, gridBagConstraints);

        jSpinner_ThighThicknessL.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(-1.2f), Float.valueOf(1.2f), Float.valueOf(0.01f)));
        jSpinner_ThighThicknessL.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_ThighThicknessL.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel_ThighThickness.add(jSpinner_ThighThicknessL, gridBagConstraints);

        jSpinner_ThighThicknessR.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(-1.2f), Float.valueOf(1.2f), Float.valueOf(0.01f)));
        jSpinner_ThighThicknessR.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_ThighThicknessR.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_ThighThickness.add(jSpinner_ThighThicknessR, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel_Thighs.add(jPanel_ThighThickness, gridBagConstraints);

        jTabbedPane_LegsFeet.addTab("Thighs", jPanel_Thighs);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel_MainLegsFeet.add(jTabbedPane_LegsFeet, gridBagConstraints);

        jTabbedPane_Main.addTab("Legs/Feet", jPanel_MainLegsFeet);

        jPanel_MainBody.setPreferredSize(new java.awt.Dimension(262, 600));
        jPanel_MainBody.setLayout(new java.awt.GridBagLayout());

        jTabbedPane_Body.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jTabbedPane_Body.setMinimumSize(new java.awt.Dimension(262, 560));
        jTabbedPane_Body.setPreferredSize(new java.awt.Dimension(262, 560));

        jPanel_Chest.setLayout(new java.awt.GridBagLayout());

        jPanel_ChestBulk.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Bulk", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel_ChestBulk.setLayout(new java.awt.GridBagLayout());

        jSlider_ChestBulk.setPaintTicks(true);
        jSlider_ChestBulk.setSnapToTicks(true);
        jPanel_ChestBulk.add(jSlider_ChestBulk, new java.awt.GridBagConstraints());

        jSpinner_ChestBulk.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_ChestBulk.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_ChestBulk.add(jSpinner_ChestBulk, gridBagConstraints);

        jPanel_Chest.add(jPanel_ChestBulk, new java.awt.GridBagConstraints());

        jPanel_ChestBroadness.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Broadness", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel_ChestBroadness.setLayout(new java.awt.GridBagLayout());

        jSlider_ChestBroadness.setPaintTicks(true);
        jSlider_ChestBroadness.setSnapToTicks(true);
        jPanel_ChestBroadness.add(jSlider_ChestBroadness, new java.awt.GridBagConstraints());

        jSpinner_ChestBroadness.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_ChestBroadness.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_ChestBroadness.add(jSpinner_ChestBroadness, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_Chest.add(jPanel_ChestBroadness, gridBagConstraints);

        jTabbedPane_Body.addTab("Chest", jPanel_Chest);

        jPanel_Abs.setLayout(new java.awt.GridBagLayout());

        jPanel_BellyRoundness.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Belly Roundness", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel_BellyRoundness.setLayout(new java.awt.GridBagLayout());

        jSlider_BellyRoundness.setPaintTicks(true);
        jSlider_BellyRoundness.setSnapToTicks(true);
        jPanel_BellyRoundness.add(jSlider_BellyRoundness, new java.awt.GridBagConstraints());

        jSpinner_BellyRoundness.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_BellyRoundness.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_BellyRoundness.add(jSpinner_BellyRoundness, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel_Abs.add(jPanel_BellyRoundness, gridBagConstraints);

        jPanel_Waistline.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Waistline", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel_Waistline.setLayout(new java.awt.GridBagLayout());

        jSlider_Waistline.setPaintTicks(true);
        jSlider_Waistline.setSnapToTicks(true);
        jPanel_Waistline.add(jSlider_Waistline, new java.awt.GridBagConstraints());

        jSpinner_Waistline.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_Waistline.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_Waistline.add(jSpinner_Waistline, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_Abs.add(jPanel_Waistline, gridBagConstraints);

        jTabbedPane_Body.addTab("Abdominals", jPanel_Abs);

        jPanel_Gluts.setLayout(new java.awt.GridBagLayout());

        jPanel_GlutRoundness.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Roundness", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel_GlutRoundness.setLayout(new java.awt.GridBagLayout());

        jSlider_GlutRoundness.setPaintTicks(true);
        jSlider_GlutRoundness.setSnapToTicks(true);
        jPanel_GlutRoundness.add(jSlider_GlutRoundness, new java.awt.GridBagConstraints());

        jSpinner_GlutRoundness.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_GlutRoundness.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_GlutRoundness.add(jSpinner_GlutRoundness, gridBagConstraints);

        jPanel_Gluts.add(jPanel_GlutRoundness, new java.awt.GridBagConstraints());

        jPanel_GlutSag.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sag", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel_GlutSag.setLayout(new java.awt.GridBagLayout());

        jSlider_GlutSag.setPaintTicks(true);
        jSlider_GlutSag.setSnapToTicks(true);
        jPanel_GlutSag.add(jSlider_GlutSag, new java.awt.GridBagConstraints());

        jSpinner_GlutSag.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_GlutSag.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_GlutSag.add(jSpinner_GlutSag, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_Gluts.add(jPanel_GlutSag, gridBagConstraints);

        jTabbedPane_Body.addTab("Gluts", jPanel_Gluts);

        jPanel_UniformBody.setLayout(new java.awt.GridBagLayout());

        jPanel_BodyWidth.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Width Scale", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel_BodyWidth.setMinimumSize(new java.awt.Dimension(210, 115));
        jPanel_BodyWidth.setPreferredSize(new java.awt.Dimension(210, 115));
        jPanel_BodyWidth.setLayout(new java.awt.GridBagLayout());

        jSlider_BodyWidth.setPaintTicks(true);
        jSlider_BodyWidth.setSnapToTicks(true);
        jPanel_BodyWidth.add(jSlider_BodyWidth, new java.awt.GridBagConstraints());

        jSpinner_UBodyWidthScale.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_UBodyWidthScale.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_BodyWidth.add(jSpinner_UBodyWidthScale, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel_UniformBody.add(jPanel_BodyWidth, gridBagConstraints);

        jPanel_BodyHeight.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Height Scale", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel_BodyHeight.setMinimumSize(new java.awt.Dimension(210, 180));
        jPanel_BodyHeight.setPreferredSize(new java.awt.Dimension(210, 180));
        jPanel_BodyHeight.setLayout(new java.awt.GridBagLayout());

        jSlider_BodyHeight.setOrientation(javax.swing.JSlider.VERTICAL);
        jSlider_BodyHeight.setPaintTicks(true);
        jSlider_BodyHeight.setSnapToTicks(true);
        jSlider_BodyHeight.setMinimumSize(new java.awt.Dimension(29, 100));
        jSlider_BodyHeight.setPreferredSize(new java.awt.Dimension(29, 100));
        jPanel_BodyHeight.add(jSlider_BodyHeight, new java.awt.GridBagConstraints());

        jSpinner_UBodyHeightScale.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_UBodyHeightScale.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_BodyHeight.add(jSpinner_UBodyHeightScale, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel_UniformBody.add(jPanel_BodyHeight, gridBagConstraints);

        jPanel_BodyDepth.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Depth Scale", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel_BodyDepth.setMinimumSize(new java.awt.Dimension(210, 115));
        jPanel_BodyDepth.setPreferredSize(new java.awt.Dimension(210, 115));
        jPanel_BodyDepth.setLayout(new java.awt.GridBagLayout());

        jSlider_BodyDepth.setPaintTicks(true);
        jSlider_BodyDepth.setSnapToTicks(true);
        jPanel_BodyDepth.add(jSlider_BodyDepth, new java.awt.GridBagConstraints());

        jSpinner_UBodyDepthScale.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_UBodyDepthScale.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_BodyDepth.add(jSpinner_UBodyDepthScale, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel_UniformBody.add(jPanel_BodyDepth, gridBagConstraints);

        jPanel_BodyUniform.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Uniform Scale", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel_BodyUniform.setMinimumSize(new java.awt.Dimension(210, 115));
        jPanel_BodyUniform.setPreferredSize(new java.awt.Dimension(210, 115));
        jPanel_BodyUniform.setLayout(new java.awt.GridBagLayout());

        jSlider_BodyUniform.setPaintTicks(true);
        jSlider_BodyUniform.setSnapToTicks(true);
        jPanel_BodyUniform.add(jSlider_BodyUniform, new java.awt.GridBagConstraints());

        jSpinner_UbodyUniScale.setMinimumSize(new java.awt.Dimension(75, 28));
        jSpinner_UbodyUniScale.setPreferredSize(new java.awt.Dimension(75, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_BodyUniform.add(jSpinner_UbodyUniScale, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel_UniformBody.add(jPanel_BodyUniform, gridBagConstraints);

        jTabbedPane_Body.addTab("Uniform", jPanel_UniformBody);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel_MainBody.add(jTabbedPane_Body, gridBagConstraints);

        jTabbedPane_Main.addTab("Body", jPanel_MainBody);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jTabbedPane_Main, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdvOptions().setVisible(true);
            }
        });
    }

    private void adjustEyes(int type, javax.swing.event.ChangeEvent e) {
        SkinnedMeshJoint[] Eyes = m_skeleton.get(m_bodyPart.Eyes);
        float adjust = 0.0f;

        switch(type)
        {
            case 0: // Horizontal Eye Position
            {
                if (jCheckBox_EyesHPosSync.isSelected()) {
                    if (jSlider_EyePosHR.getValue() == 5)
                        adjust  = ((float)jSlider_EyePosHR.getValue() / 5.0f);
                    else
                        adjust  = (((float)jSlider_EyePosHR.getValue() / 5.0f) - 1.0f)/m_baseLen;

                    for (int i = 0; i < Eyes.length; i++) {
                        if (Eyes[i].getName().contains("left")) {

                        } else {

                        }
                    }
                }
                
                break;
            }
            case 1: // Vertical Eye Position
            {
                Object obj = e.getSource();

                if (jCheckBox_EyeVPosSync.isSelected()) {
                    jSlider_EyePosVL.setValue(jSlider_EyePosVR.getValue());

                    if (jSlider_EyePosVR.getValue() == 5)
                        adjust  = (((float)jSlider_EyePosVR.getValue() / 5.0f) - 1.0f);
                    else
                        adjust  = (((float)jSlider_EyePosVR.getValue() / 5.0f) - 1.0f)/m_baseLen;

                    for (int i = 0; i < Eyes.length; i++) {
                        Vector3f mod    = new Vector3f(Eyes[i].getLocalModifierMatrix().getTranslation());
                        mod.y           = 0.0f;
                        mod.y          += adjust;

                        if (Eyes[i].getName().contains("EyeLid"))
                            Eyes[i].getLocalModifierMatrix().setTranslation(new Vector3f(mod.x, mod.y/4.0f, mod.z));
                        else if (Eyes[i].getName().contains("Eye"))
                            Eyes[i].getLocalModifierMatrix().setTranslation(new Vector3f(mod.x, mod.y/5.0f, mod.z));
                        else
                            Eyes[i].getLocalModifierMatrix().setTranslation(new Vector3f(mod.x, mod.y, mod.z));
                    }
                }

                break;
            }
            case 2: // Depth Eye Position
            {
                if (jCheckBox_EyeDPosSync.isSelected()) {

                }

                break;
            }
            case 3: // Eye Scaling
            {
                break;
            }
        }
    }

    private void adjustHands(int type, javax.swing.event.ChangeEvent e) {
        SkinnedMeshJoint[] LHand = m_skeleton.get(m_bodyPart.Left_Hand);
        SkinnedMeshJoint[] RHand = m_skeleton.get(m_bodyPart.Right_Hand);

        float Ladjust   = 0.0f;
        float Radjust   = 0.0f;
        Vector3f modL   = null;
        Vector3f modR   = null;
        Vector3f modlS  = null;
        Vector3f modrS  = null;
        Object obj = e.getSource();

        switch(type)
        {
            case 0: // Length
            {
                if (jCheckBox_HandsLenSync.isSelected()) {
                    float curValL = (float)jSlider_FingerLengthL.getValue();
                    float curValR = (float)jSlider_FingerLengthR.getValue();
                    Ladjust = (curValL - m_baseLen) / 100.0f;
                    Radjust = (curValR - m_baseLen) / 100.0f;


                    for(int i = 0; i < LHand.length; i++) {
                        modL = new Vector3f(LHand[i].getLocalModifierMatrix().getTranslation());
                        modR = new Vector3f(RHand[i].getLocalModifierMatrix().getTranslation());
                        modlS = new Vector3f(LHand[i].getLocalModifierMatrix().getScaleVector());
                        modrS = new Vector3f(RHand[i].getLocalModifierMatrix().getScaleVector());
                        modL.y  = 0.0f;     modR.y  = 0.0f;     modlS.y = 1.0f;       modrS.y = 1.0f;
                        modL.y += Ladjust;  modR.y += Radjust;  modlS.y += Ladjust;   modrS.y += Radjust;

                        if (LHand[i].getName().equals("leftHand")) {
//                            LHand[i].getLocalModifierMatrix().setTranslation(new Vector3f(modL.x, modL.y / 2.0f, modL.z));
//                            LHand[i].getLocalModifierMatrix().setScale(modlS);
                        }
                        else if (LHand[i].getName().contains("Palm")) {
                            LHand[i].getLocalModifierMatrix().setTranslation(new Vector3f(modL.x, modL.y / 2.0f, modL.z));
                            LHand[i].getLocalModifierMatrix().setScale(modlS);
                        }
                        else {
                            LHand[i].getLocalModifierMatrix().setTranslation(new Vector3f(modL.x, modL.y, modL.z));
                            LHand[i].getLocalModifierMatrix().setScale(modlS);
                        }

                        if (RHand[i].getName().equals("rightHand")) {
//                            RHand[i].getLocalModifierMatrix().setTranslation(new Vector3f(modR.x, modR.y / 2.0f, modR.z));
//                            RHand[i].getLocalModifierMatrix().setScale(modrS);
                        }
                        else if (RHand[i].getName().contains("Palm")) {
                            RHand[i].getLocalModifierMatrix().setTranslation(new Vector3f(modR.x, modR.y / 2.0f, modR.z));
                            RHand[i].getLocalModifierMatrix().setScale(modrS);
                        }
                        else {
                            RHand[i].getLocalModifierMatrix().setTranslation(new Vector3f(modR.x, modR.y, modR.z));
                            RHand[i].getLocalModifierMatrix().setScale(modrS);
                        }
                    }

                } else if (obj.equals(jSlider_FingerLengthL)) {
                    float curVal  = (float)jSlider_FingerLengthL.getValue();
                    Ladjust     = (curVal - m_baseLen) / 100.0f;
                    for (int i = 0; i < LHand.length; i++) {
                        modL = new Vector3f(LHand[i].getLocalModifierMatrix().getTranslation());
                        modlS = new Vector3f(LHand[i].getLocalModifierMatrix().getScaleVector());
                        modL.y   = 0.0f;     modlS.y = 1.0f;
                        modL.y  += Ladjust;  modlS.y += Ladjust;
                        if (LHand[i].getName().equals("leftHand")) {
//                            LHand[i].getLocalModifierMatrix().setTranslation(new Vector3f(mod.x, mod.y / 2.0f, mod.z));
//                            LHand[i].getLocalModifierMatrix().setScale(modlS);
                        }
                        else if (LHand[i].getName().contains("Palm")) {
                            LHand[i].getLocalModifierMatrix().setTranslation(new Vector3f(modL.x, modL.y / 2.0f, modL.z));
                            LHand[i].getLocalModifierMatrix().setScale(modlS);
                        }
                        else {
                            LHand[i].getLocalModifierMatrix().setTranslation(new Vector3f(modL.x, modL.y, modL.z));
                            LHand[i].getLocalModifierMatrix().setScale(modlS);
                        }
                    }
                    jSpinner_FingerLengthL.setValue(modL.y);
                } else if (obj.equals(jSlider_FingerLengthR)) {
                    float curVal  = (float)jSlider_FingerLengthR.getValue();
                    Radjust     = (curVal - m_baseLen) / 100.0f;
                    for (int i = 0; i < RHand.length; i++) {
                        modR = new Vector3f(RHand[i].getLocalModifierMatrix().getTranslation());
                        modrS = new Vector3f(RHand[i].getLocalModifierMatrix().getScaleVector());
                        modR.y  = 0.0f;     modR.y += Radjust;
                        modrS.y = 1.0f;     modrS.y += Radjust;
                        modrS.y = 1.0f; modrS.y += Radjust;
                        if (RHand[i].getName().equals("rightHand")) {
//                            RHand[i].getLocalModifierMatrix().setTranslation(new Vector3f(mod.x, mod.y / 2.0f, mod.z));
//                            RHand[i].getLocalModifierMatrix().setScale(modrS);
                        }
                        else if (RHand[i].getName().contains("Palm")) {
                            RHand[i].getLocalModifierMatrix().setTranslation(new Vector3f(modR.x, modR.y / 2.0f, modR.z));
                            RHand[i].getLocalModifierMatrix().setScale(modrS);
                        }
                        else {
                            RHand[i].getLocalModifierMatrix().setTranslation(new Vector3f(modR.x, modR.y, modR.z));
                            RHand[i].getLocalModifierMatrix().setScale(modrS);
                        }
                    }
                    jSpinner_FingerLengthR.setValue(modR.y);
                }

                break;
            }
            case 1: // Thickness
            {
                if (jCheckBox_HandThickSync.isSelected()) {

                } else if (obj.equals(jSlider_HandThicknessL)) {
                    float curVal = (float)jSlider_HandThicknessL.getValue();
                    Ladjust = (curVal - m_baseScale) / 100.0f;
                    jSpinner_HandThicknessL.setValue(1.0f + Ladjust);

                    for (int i = 0; i < LHand.length; i++) {
                        modlS = new Vector3f(LHand[i].getLocalModifierMatrix().getScaleVector());
                        modlS.x = 1.0f; modlS.z = 1.0f;
                        modlS.x += Ladjust; modlS.z += Ladjust;
                        if (LHand[i].getName().contains("Palm") || LHand[i].getName().equals("leftHand"))
                            LHand[i].getLocalModifierMatrix().setScale(modlS);
                        else
                            LHand[i].getLocalModifierMatrix().setScale(new Vector3f(modlS.x * 1.1f, modlS.y, modlS.z * 1.1f));
                    }

                } else if (obj.equals(jSlider_HandThicknessR)) {
                    float curVal = (float)jSlider_HandThicknessR.getValue();
                    Radjust = (curVal - m_baseScale) / 100.0f;
                    jSpinner_HandThicknessR.setValue(1.0f + Radjust);

                    for (int i = 0; i < RHand.length; i++) {
                        modrS = new Vector3f(RHand[i].getLocalModifierMatrix().getScaleVector());
                        modrS.x = 1.0f; modrS.z = 1.0f;
                        modrS.x += Radjust; modrS.z += Radjust;
                        if (RHand[i].getName().contains("Palm") || RHand[i].getName().equals("rightHand"))
                            RHand[i].getLocalModifierMatrix().setScale(modrS);
                        else
                            RHand[i].getLocalModifierMatrix().setScale(new Vector3f(modrS.x * 1.1f, modrS.y, modrS.z * 1.1f));
                    }
                }

                break;
            }
        }
    }

    private void adjustForearms(int type, javax.swing.event.ChangeEvent e) {
        SkinnedMeshJoint[] LForearm = m_skeleton.get(m_bodyPart.Left_LowerArm);
        SkinnedMeshJoint[] RForearm = m_skeleton.get(m_bodyPart.Right_LowerArm);

        float Ladjust   = 0.0f;
        float Radjust   = 0.0f;
        Vector3f modL   = null;
        Vector3f modR   = null;
        Vector3f modlS  = null;
        Vector3f modrS  = null;
        Object obj = e.getSource();

        switch(type)
        {
            case 0: // Length
            {
                if (jCheckBox_ForearmLenSync.isSelected()) {

                } else if (obj.equals(jSlider_ForearmLengthL)) {
                    float curVal = jSlider_ForearmLengthL.getValue();
                    Ladjust = (curVal - m_baseLen) / 100.0f;
                    jSpinner_ForearmLengthL.setValue(Ladjust);

                    // Convert to new system! UNIQUESTRINGID
//                    if (LForearm[1].getSkeletonModifier() == null) {
//                        LForearm[1].setSkeletonModifier(new PMatrix());
//                        modL = new Vector3f(LForearm[1].getSkeletonModifier().getTranslation());
//                    }
//                    else
//                        modL = new Vector3f(LForearm[1].getSkeletonModifier().getTranslation());
//                    modL.y = 0.0f;     modL.y += Ladjust;
//
//                    LForearm[1].getSkeletonModifier().setTranslation(modL);

                } else if (obj.equals(jSlider_ForearmLengthR)) {
                    float curVal = jSlider_ForearmLengthR.getValue();
                    Radjust = (curVal - m_baseLen) / 100.0f;
                    jSpinner_ForearmLengthR.setValue(Radjust);
                    // Convert to new system! UNIQUESTRINGID
//                    if (RForearm[1].getSkeletonModifier() == null) {
//                        RForearm[1].setSkeletonModifier(new PMatrix());
//                        modR = new Vector3f(RForearm[1].getSkeletonModifier().getTranslation());
//                    }
//                    else
//                        modR = new Vector3f(RForearm[1].getSkeletonModifier().getTranslation());
//                    modR.y = 0.0f;     modR.y += Radjust;
//
//                    RForearm[1].getSkeletonModifier().setTranslation(modR);
                }
                break;
            }
            case 1: // Thickness
            {
                if (jCheckBox_ForearmThickSync.isSelected()) {

                } else if (obj.equals(jSlider_ForearmThicknessL)) {
                    float curVal = jSlider_ForearmThicknessL.getValue();
                    Ladjust = (curVal - m_baseScale) / 100.0f;
                    jSpinner_ForearmThicknessL.setValue(1.0f + Ladjust);

                    for (int i = 0; i < LForearm.length; i++) {
                        modlS = new Vector3f(LForearm[i].getLocalModifierMatrix().getScaleVector());
                        modlS.x = 1.0f;     modlS.x += Ladjust;
                        modlS.z = 1.0f;     modlS.z += Ladjust;

                        LForearm[i].getLocalModifierMatrix().setScale(new Vector3f(modlS.x, modlS.y, modlS.z));
                    }
                } else if (obj.equals(jSlider_ForearmThicknessR)) {
                    float curVal = jSlider_ForearmThicknessR.getValue();
                    Radjust = (curVal - m_baseScale) / 100.0f;
                    jSpinner_ForearmThicknessR.setValue(1.0f + Radjust);

                    for (int i = 0; i < RForearm.length; i++) {
                        modrS = new Vector3f(RForearm[i].getLocalModifierMatrix().getScaleVector());
                        modrS.x = 1.0f;     modrS.x += Radjust;
                        modrS.z = 1.0f;     modrS.z += Radjust;

                        RForearm[i].getLocalModifierMatrix().setScale(new Vector3f(modrS.x, modrS.y, modrS.z));
                    }
                }
                break;
            }
        }
    }

    private void adjustUpperarms(int type, javax.swing.event.ChangeEvent e) {
        SkinnedMeshJoint[] LUpperarm = m_skeleton.get(m_bodyPart.Left_UpperArm);
        SkinnedMeshJoint[] RUpperarm = m_skeleton.get(m_bodyPart.Right_UpperArm);

        float Ladjust   = 0.0f;
        float Radjust   = 0.0f;
        Vector3f modL   = null;
        Vector3f modR   = null;
        Vector3f modlS  = null;
        Vector3f modrS  = null;
        Object obj = e.getSource();

        switch(type)
        {
            case 0: //  Length
            {
                if (jCheckBox_UpperarmLenSync.isSelected()) {

                } else if (obj.equals(jSlider_UpperArmLengthL)) {
                    float curVal = jSlider_UpperArmLengthL.getValue();
                    Ladjust = (curVal - m_baseLen) / 100.0f;
                    jSpinner_UpperarmLengthL.setValue(Ladjust);
                    // Convert to new system! UNIQUESTRINGID
//                    if (LUpperarm[1].getSkeletonModifier() == null) {
//                        LUpperarm[1].setSkeletonModifier(new PMatrix());
//                        modL = new Vector3f(LUpperarm[1].getSkeletonModifier().getTranslation());
//                    }
//                    else
//                        modL = new Vector3f(LUpperarm[1].getSkeletonModifier().getTranslation());
//                    modL.y = 0.0f;     modL.y += Ladjust;
//
//                    LUpperarm[1].getSkeletonModifier().setTranslation(modL);

                } else if (obj.equals(jSlider_UpperarmLengthR)) {
                    float curVal = jSlider_UpperarmLengthR.getValue();
                    Radjust = (curVal - m_baseLen) / 100.0f;
                    jSpinner_UpperarmLengthR.setValue(Radjust);

                    // Convert to new system! UNIQUESTRINGID
//                    if (RUpperarm[1].getSkeletonModifier() == null) {
//                        RUpperarm[1].setSkeletonModifier(new PMatrix());
//                        modR = new Vector3f(RUpperarm[1].getSkeletonModifier().getTranslation());
//                    }
//                    else
//                        modR = new Vector3f(RUpperarm[1].getSkeletonModifier().getTranslation());
//                    modR.y = 0.0f;     modR.y += Radjust;
//
//                    RUpperarm[1].getSkeletonModifier().setTranslation(modR);
                }
                break;
            }
            case 1: // Thickness
            {
                if (jCheckBox_UpperarmThickSync.isSelected()) {

                } else if (obj.equals(jSlider_UpperarmThicknessL)) {
                    float curVal = jSlider_UpperarmThicknessL.getValue();
                    Ladjust = (curVal - m_baseScale) / 100.0f;
                    jSpinner_UpperarmThicknessL.setValue(1.0f + Ladjust);

                    for (int i = 0; i < LUpperarm.length; i++) {
                        modlS = new Vector3f(LUpperarm[i].getLocalModifierMatrix().getScaleVector());
                        modlS.x = 1.0f;     modlS.x += Ladjust;
                        modlS.z = 1.0f;     modlS.z += Ladjust;

                        LUpperarm[i].getLocalModifierMatrix().setScale(new Vector3f(modlS.x, modlS.y, modlS.z));
                    }
                } else if (obj.equals(jSlider_UpperarmThicknessR)) {
                    float curVal = jSlider_UpperarmThicknessR.getValue();
                    Radjust = (curVal - m_baseScale) / 100.0f;
                    jSpinner_UpperarmThicknessR.setValue(1.0f + Radjust);

                    for (int i = 0; i < RUpperarm.length; i++) {
                        modrS = new Vector3f(RUpperarm[i].getLocalModifierMatrix().getScaleVector());
                        modrS.x = 1.0f;     modrS.x += Radjust;
                        modrS.z = 1.0f;     modrS.z += Radjust;

                        RUpperarm[i].getLocalModifierMatrix().setScale(new Vector3f(modrS.x, modrS.y, modrS.z));
                    }
                }
                break;
            }
        }
    }

    private void adjustFeet(int type, javax.swing.event.ChangeEvent e) {
        SkinnedMeshJoint[] LFoot = m_skeleton.get(m_bodyPart.Left_Foot);
        SkinnedMeshJoint[] RFoot = m_skeleton.get(m_bodyPart.Right_Foot);

        float Ladjust   = 0.0f;
        float Radjust   = 0.0f;
        Vector3f modL   = null;
        Vector3f modR   = null;
        Vector3f modlS  = null;
        Vector3f modrS  = null;
        Object obj = e.getSource();

        switch(type)
        {
            case 0: // Length
            {
                if (jCheckBox_FeetLenSync.isSelected()) {

                } else if (obj.equals(jSlider_FeetLengthL)) {
                    float curVal = jSlider_FeetLengthL.getValue();
                    Ladjust = (curVal - m_baseLen) / 100.0f;
                    jSpinner_FeetLengthL.setValue(Ladjust);

                    // Convert to new system! UNIQUESTRINGID
//                    if (LFoot[1].getSkeletonModifier() == null) {
//                        LFoot[1].setSkeletonModifier(new PMatrix());
//                        modL = new Vector3f(LFoot[1].getSkeletonModifier().getTranslation());
//                    }
//                    else
//                        modL = new Vector3f(LFoot[1].getSkeletonModifier().getTranslation());
//                    modL.z = 0.0f;     modL.z += Ladjust;
//
//                    LFoot[1].getSkeletonModifier().setTranslation(modL);

                } else if (obj.equals(jSlider_FeetLengthR)) {
                    float curVal = jSlider_FeetLengthR.getValue();
                    Radjust = (curVal - m_baseLen) / 100.0f;
                    jSpinner_FeetLengthR.setValue(Radjust);

                    // Convert to new system! UNIQUESTRINGID
//                    if (RFoot[1].getSkeletonModifier() == null) {
//                        RFoot[1].setSkeletonModifier(new PMatrix());
//                        modR = new Vector3f(RFoot[1].getSkeletonModifier().getTranslation());
//                    }
//                    else
//                        modR = new Vector3f(RFoot[1].getSkeletonModifier().getTranslation());
//                    modR.z = 0.0f;     modR.z += Radjust;
//
//                    RFoot[1].getSkeletonModifier().setTranslation(modR);
                }
                break;
            }
            case 1: // Thickness
            {
                if (jCheckBox_FeetThickSync.isSelected()) {

                } else if (obj.equals(jSlider_FeetThicknessL)) {
                    float curVal = jSlider_FeetThicknessL.getValue();
                    Ladjust = (curVal - m_baseScale) / 100.0f;
                    jSpinner_FeetThicknessL.setValue(1.0f + Ladjust);

                    for (int i = 0; i < LFoot.length; i++) {
                        modlS = new Vector3f(LFoot[i].getLocalModifierMatrix().getScaleVector());
                        modlS.x = 1.0f;     modlS.x += Ladjust;
                        modlS.z = 1.0f;     modlS.z += Ladjust;

                        LFoot[i].getLocalModifierMatrix().setScale(new Vector3f(modlS.x, modlS.y, modlS.z));
                    }
                } else if (obj.equals(jSlider_FeetThicknessR)) {
                    float curVal = jSlider_FeetThicknessR.getValue();
                    Radjust = (curVal - m_baseScale) / 100.0f;
                    jSpinner_FeetThicknessR.setValue(1.0f + Radjust);

                    for (int i = 0; i < RFoot.length; i++) {
                        modrS = new Vector3f(RFoot[i].getLocalModifierMatrix().getScaleVector());
                        modrS.x = 1.0f;     modrS.x += Radjust;
                        modrS.z = 1.0f;     modrS.z += Radjust;

                        RFoot[i].getLocalModifierMatrix().setScale(new Vector3f(modrS.x, modrS.y, modrS.z));
                    }
                }
                break;
            }
        }
    }

    private void adjustCalves(int type, javax.swing.event.ChangeEvent e) {
        SkinnedMeshJoint[] LCalves = m_skeleton.get(m_bodyPart.Left_LowerLeg);
        SkinnedMeshJoint[] RCalves = m_skeleton.get(m_bodyPart.Right_LowerLeg);

        float Ladjust   = 0.0f;
        float Radjust   = 0.0f;
        Vector3f modL   = null;
        Vector3f modR   = null;
        Vector3f modlS  = null;
        Vector3f modrS  = null;
        Object obj = e.getSource();

        switch(type)
        {
            case 0: // Length
            {
                if (jCheckBox_CalvesLenSync.isSelected()) {

                } else if (obj.equals(jSlider_CalvesLengthL)) {
                    float curVal = jSlider_CalvesLengthL.getValue();
                    Ladjust = (curVal - m_baseLen) / 100.0f;
                    jSpinner_CalvesLengthL.setValue(Ladjust);

                    // Convert to new system! UNIQUESTRINGID
//                    if (LCalves[1].getSkeletonModifier() == null) {
//                        LCalves[1].setSkeletonModifier(new PMatrix());
//                        modL = new Vector3f(LCalves[1].getSkeletonModifier().getTranslation());
//                    }
//                    else
//                        modL = new Vector3f(LCalves[1].getSkeletonModifier().getTranslation());
//                    modL.y = 0.0f;     modL.y += Ladjust;
//
//                    LCalves[1].getSkeletonModifier().setTranslation(modL);

                } else if (obj.equals(jSlider_CalvesLengthR)) {
                    float curVal = jSlider_CalvesLengthR.getValue();
                    Radjust = (curVal - m_baseLen) / 100.0f;
                    jSpinner_CalvesLengthR.setValue(Radjust);

                    // Convert to new system! UNIQUESTRINGID
//                    if (RCalves[1].getSkeletonModifier() == null) {
//                        RCalves[1].setSkeletonModifier(new PMatrix());
//                        modR = new Vector3f(RCalves[1].getSkeletonModifier().getTranslation());
//                    }
//                    else
//                        modR = new Vector3f(RCalves[1].getSkeletonModifier().getTranslation());
//                    modR.y = 0.0f;     modR.y += Radjust;
//
//                    RCalves[1].getSkeletonModifier().setTranslation(modR);

                }
                break;
            }
            case 1: // Thickness
            {
                if (jCheckBox_CalvesThickSync.isSelected()) {

                } else if (obj.equals(jSlider_CalvesThicknessL)) {
                    float curVal = jSlider_CalvesThicknessL.getValue();
                    Ladjust = (curVal - m_baseScale) / 100.0f;
                    jSpinner_CalvesThicknessL.setValue(1.0f + Ladjust);

                    for (int i = 0; i < LCalves.length; i++) {
                        modlS = new Vector3f(LCalves[i].getLocalModifierMatrix().getScaleVector());
                        modlS.x = 1.0f;     modlS.x += Ladjust;
                        modlS.z = 1.0f;     modlS.z += Ladjust;

                        LCalves[i].getLocalModifierMatrix().setScale(new Vector3f(modlS.x, modlS.y, modlS.z));
                    }
                } else if (obj.equals(jSlider_CalvesThicknessR)) {
                    float curVal = jSlider_CalvesThicknessR.getValue();
                    Radjust = (curVal - m_baseScale) / 100.0f;
                    jSpinner_CalvesThicknessR.setValue(1.0f + Radjust);

                    for (int i = 0; i < RCalves.length; i++) {
                        modrS = new Vector3f(RCalves[i].getLocalModifierMatrix().getScaleVector());
                        modrS.x = 1.0f;     modrS.x += Radjust;
                        modrS.z = 1.0f;     modrS.z += Radjust;

                        RCalves[i].getLocalModifierMatrix().setScale(new Vector3f(modrS.x, modrS.y, modrS.z));
                    }
                }
                break;
            }
        }
    }

    private void adjustThighs(int type, javax.swing.event.ChangeEvent e) {
        SkinnedMeshJoint[] LThighs = m_skeleton.get(m_bodyPart.Left_UpperLeg);
        SkinnedMeshJoint[] RThighs = m_skeleton.get(m_bodyPart.Right_UpperLeg);

        float Ladjust   = 0.0f;
        float Radjust   = 0.0f;
        Vector3f modL   = null;
        Vector3f modR   = null;
        Vector3f modlS  = null;
        Vector3f modrS  = null;
        Object obj = e.getSource();

        switch(type)
        {
            case 0: // Length
            {
                if (jCheckBox_ThighLenSync.isSelected()) {

                } else if (obj.equals(jSlider_ThighLengthL)) {
                    float curVal = jSlider_ThighLengthL.getValue();
                    Ladjust = (curVal - m_baseLen) / 100.0f;
                    jSpinner_ThighLengthL.setValue(Ladjust);

                    // Convert to new system! UNIQUESTRINGID
//                    if (LThighs[1].getSkeletonModifier() == null) {
//                        LThighs[1].setSkeletonModifier(new PMatrix());
//                        modL = new Vector3f(LThighs[1].getSkeletonModifier().getTranslation());
//                    }
//                    else
//                        modL = new Vector3f(LThighs[1].getSkeletonModifier().getTranslation());
//                    modL.y = 0.0f;     modL.y += Ladjust;
//
//                    LThighs[1].getSkeletonModifier().setTranslation(modL);

                } else if (obj.equals(jSlider_ThighLengthR)) {
                    float curVal = jSlider_ThighLengthR.getValue();
                    Radjust = (curVal - m_baseLen) / 100.0f;
                    jSpinner_ThighLengthR.setValue(Radjust);

                    // Convert to new system! UNIQUESTRINGID
//                    if (RThighs[1].getSkeletonModifier() == null) {
//                        RThighs[1].setSkeletonModifier(new PMatrix());
//                        modR = new Vector3f(RThighs[1].getSkeletonModifier().getTranslation());
//                    }
//                    else
//                        modR = new Vector3f(RThighs[1].getSkeletonModifier().getTranslation());
//                    modR.y = 0.0f;     modR.y += Radjust;
//
//                    RThighs[1].getSkeletonModifier().setTranslation(modR);

                }
                break;
            }
            case 1: // Thickness
            {
                if (jCheckBox_ThighThickSync.isSelected()) {

                } else if (obj.equals(jSlider_ThighThicknessL)) {
                    float curVal = jSlider_ThighThicknessL.getValue();
                    Ladjust = (curVal - m_baseScale) / 100.0f;
                    jSpinner_ThighThicknessL.setValue(1.0f + Ladjust);

                    for (int i = 0; i < LThighs.length; i++) {
                        modlS = new Vector3f(LThighs[i].getLocalModifierMatrix().getScaleVector());
                        modlS.x = 1.0f;     modlS.x += Ladjust;
                        modlS.z = 1.0f;     modlS.z += Ladjust;

                        LThighs[i].getLocalModifierMatrix().setScale(new Vector3f(modlS.x, modlS.y, modlS.z));
                    }
                } else if (obj.equals(jSlider_ThighThicknessR)) {
                    float curVal = jSlider_ThighThicknessR.getValue();
                    Radjust = (curVal - m_baseScale) / 100.0f;
                    jSpinner_ThighThicknessR.setValue(1.0f + Radjust);

                    for (int i = 0; i < RThighs.length; i++) {
                        modrS = new Vector3f(RThighs[i].getLocalModifierMatrix().getScaleVector());
                        modrS.x = 1.0f;     modrS.x += Radjust;
                        modrS.z = 1.0f;     modrS.z += Radjust;

                        RThighs[i].getLocalModifierMatrix().setScale(new Vector3f(modrS.x, modrS.y, modrS.z));
                    }
                }
                break;
            }
        }
    }

    private void adjustChest(int type, javax.swing.event.ChangeEvent e) {
        SkinnedMeshJoint[] Torso = m_skeleton.get(m_bodyPart.Torso);
        SkinnedMeshJoint[] LShoulder = m_skeleton.get(m_bodyPart.Left_Shoulder);
        SkinnedMeshJoint[] RShoulder;

        float adjust    = 0.0f;
        Vector3f mod    = null;
        Vector3f modS   = null;
        Object obj      = e.getSource();

        switch(type)
        {
            case 0: // BULK
            {

                break;
            }
            case 1: // BROADNESS
            {
                break;
            }
        }
    }

    private void adjustStomach(int type, javax.swing.event.ChangeEvent e) {
        SkinnedMeshJoint[] Torso = m_skeleton.get(m_bodyPart.Torso);

        float adjust    = 0.0f;
        Vector3f mod    = null;
        Vector3f modS   = null;
        Object obj      = e.getSource();

        switch(type)
        {
            case 0: // Roundness
            {
                break;
            }
            case 1: // Waistline
            {
                break;
            }
        }
    }

    private void adjustGluts(int type, javax.swing.event.ChangeEvent e) {
        SkinnedMeshJoint[] Gluts = m_skeleton.get(m_bodyPart.Torso);

        float adjust    = 0.0f;
        Vector3f mod    = null;
        Vector3f modS   = null;
        Object obj      = e.getSource();

        switch(type)
        {
            case 0: // Roundness
            {
                break;
            }
            case 1: // Sag
            {
                break;
            }
        }
    }

    private void adjustBody(int type, javax.swing.event.ChangeEvent e) {

    }

    /** Accessors **/
    public SceneEssentials getSceneData() {
        return m_sceneData;
    }

    public Map<m_bodyPart, SkinnedMeshJoint[]> getSkeletonJoints() {
        return m_skeleton;
    }

    public SkinnedMeshJoint[] getSkeletonJointsBySection(int section) {
        return m_skeleton.get(section);
    }

    /** Mutators **/
    public void setSceneData(SceneEssentials scene) {
        m_sceneData = scene;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBox_CalvesLenSync;
    private javax.swing.JCheckBox jCheckBox_CalvesThickSync;
    private javax.swing.JCheckBox jCheckBox_EyeDPosSync;
    private javax.swing.JCheckBox jCheckBox_EyeVPosSync;
    private javax.swing.JCheckBox jCheckBox_EyesHPosSync;
    private javax.swing.JCheckBox jCheckBox_FeetLenSync;
    private javax.swing.JCheckBox jCheckBox_FeetThickSync;
    private javax.swing.JCheckBox jCheckBox_ForearmLenSync;
    private javax.swing.JCheckBox jCheckBox_ForearmThickSync;
    private javax.swing.JCheckBox jCheckBox_HandThickSync;
    private javax.swing.JCheckBox jCheckBox_HandsLenSync;
    private javax.swing.JCheckBox jCheckBox_ThighLenSync;
    private javax.swing.JCheckBox jCheckBox_ThighThickSync;
    private javax.swing.JCheckBox jCheckBox_UpperarmLenSync;
    private javax.swing.JCheckBox jCheckBox_UpperarmThickSync;
    private javax.swing.JLabel jLabel_EyeUni;
    private javax.swing.JLabel jLabel_EyeX;
    private javax.swing.JLabel jLabel_EyeY;
    private javax.swing.JLabel jLabel_EyeZ;
    private javax.swing.JLabel jLabel_MouthU;
    private javax.swing.JLabel jLabel_MouthX;
    private javax.swing.JLabel jLabel_MouthY;
    private javax.swing.JLabel jLabel_MouthZ;
    private javax.swing.JLabel jLabel_NoseU;
    private javax.swing.JLabel jLabel_NoseX;
    private javax.swing.JLabel jLabel_NoseY;
    private javax.swing.JLabel jLabel_NoseZ;
    private javax.swing.JPanel jPanel_Abs;
    private javax.swing.JPanel jPanel_BellyRoundness;
    private javax.swing.JPanel jPanel_BodyDepth;
    private javax.swing.JPanel jPanel_BodyHeight;
    private javax.swing.JPanel jPanel_BodyUniform;
    private javax.swing.JPanel jPanel_BodyWidth;
    private javax.swing.JPanel jPanel_Calves;
    private javax.swing.JPanel jPanel_CalvesLength;
    private javax.swing.JPanel jPanel_CalvesThickness;
    private javax.swing.JPanel jPanel_Chest;
    private javax.swing.JPanel jPanel_ChestBroadness;
    private javax.swing.JPanel jPanel_ChestBulk;
    private javax.swing.JPanel jPanel_EyePosD;
    private javax.swing.JPanel jPanel_EyePosH;
    private javax.swing.JPanel jPanel_EyePosV;
    private javax.swing.JPanel jPanel_EyeScaling;
    private javax.swing.JPanel jPanel_Eyes;
    private javax.swing.JPanel jPanel_Feet;
    private javax.swing.JPanel jPanel_FeetLength;
    private javax.swing.JPanel jPanel_FeetThickness;
    private javax.swing.JPanel jPanel_FingerLength;
    private javax.swing.JPanel jPanel_ForearmLength;
    private javax.swing.JPanel jPanel_ForearmThickness;
    private javax.swing.JPanel jPanel_Forearms;
    private javax.swing.JPanel jPanel_GlutRoundness;
    private javax.swing.JPanel jPanel_GlutSag;
    private javax.swing.JPanel jPanel_Gluts;
    private javax.swing.JPanel jPanel_HandThickness;
    private javax.swing.JPanel jPanel_Hands;
    private javax.swing.JPanel jPanel_HeadDepth;
    private javax.swing.JPanel jPanel_HeadHeight;
    private javax.swing.JPanel jPanel_HeadUniform;
    private javax.swing.JPanel jPanel_HeadWidth;
    private javax.swing.JPanel jPanel_LipsPos;
    private javax.swing.JPanel jPanel_MainArmsHands;
    private javax.swing.JPanel jPanel_MainBody;
    private javax.swing.JPanel jPanel_MainHead;
    private javax.swing.JPanel jPanel_MainLegsFeet;
    private javax.swing.JPanel jPanel_Mouth;
    private javax.swing.JPanel jPanel_MouthScaling;
    private javax.swing.JPanel jPanel_MouthWidth;
    private javax.swing.JPanel jPanel_Nose;
    private javax.swing.JPanel jPanel_NoseLen;
    private javax.swing.JPanel jPanel_NosePosH;
    private javax.swing.JPanel jPanel_NoseScaling;
    private javax.swing.JPanel jPanel_NoseWidth;
    private javax.swing.JPanel jPanel_ThighLength;
    private javax.swing.JPanel jPanel_ThighThickness;
    private javax.swing.JPanel jPanel_Thighs;
    private javax.swing.JPanel jPanel_UniformBody;
    private javax.swing.JPanel jPanel_UniformHead;
    private javax.swing.JPanel jPanel_UpperArms;
    private javax.swing.JPanel jPanel_UpperarmLength;
    private javax.swing.JPanel jPanel_UpperarmThickness;
    private javax.swing.JPanel jPanel_Waistline;
    private javax.swing.JSlider jSlider_BellyRoundness;
    private javax.swing.JSlider jSlider_BodyDepth;
    private javax.swing.JSlider jSlider_BodyHeight;
    private javax.swing.JSlider jSlider_BodyUniform;
    private javax.swing.JSlider jSlider_BodyWidth;
    private javax.swing.JSlider jSlider_CalvesLengthL;
    private javax.swing.JSlider jSlider_CalvesLengthR;
    private javax.swing.JSlider jSlider_CalvesThicknessL;
    private javax.swing.JSlider jSlider_CalvesThicknessR;
    private javax.swing.JSlider jSlider_ChestBroadness;
    private javax.swing.JSlider jSlider_ChestBulk;
    private javax.swing.JSlider jSlider_EyePosDL;
    private javax.swing.JSlider jSlider_EyePosDR;
    private javax.swing.JSlider jSlider_EyePosHL;
    private javax.swing.JSlider jSlider_EyePosHR;
    private javax.swing.JSlider jSlider_EyePosVL;
    private javax.swing.JSlider jSlider_EyePosVR;
    private javax.swing.JSlider jSlider_EyeUni;
    private javax.swing.JSlider jSlider_EyeX;
    private javax.swing.JSlider jSlider_EyeY;
    private javax.swing.JSlider jSlider_EyeZ;
    private javax.swing.JSlider jSlider_FeetLengthL;
    private javax.swing.JSlider jSlider_FeetLengthR;
    private javax.swing.JSlider jSlider_FeetThicknessL;
    private javax.swing.JSlider jSlider_FeetThicknessR;
    private javax.swing.JSlider jSlider_FingerLengthL;
    private javax.swing.JSlider jSlider_FingerLengthR;
    private javax.swing.JSlider jSlider_ForearmLengthL;
    private javax.swing.JSlider jSlider_ForearmLengthR;
    private javax.swing.JSlider jSlider_ForearmThicknessL;
    private javax.swing.JSlider jSlider_ForearmThicknessR;
    private javax.swing.JSlider jSlider_GlutRoundness;
    private javax.swing.JSlider jSlider_GlutSag;
    private javax.swing.JSlider jSlider_HandThicknessL;
    private javax.swing.JSlider jSlider_HandThicknessR;
    private javax.swing.JSlider jSlider_HeadDepth;
    private javax.swing.JSlider jSlider_HeadHeight;
    private javax.swing.JSlider jSlider_HeadUniform;
    private javax.swing.JSlider jSlider_HeadWidth;
    private javax.swing.JSlider jSlider_LowerLip;
    private javax.swing.JSlider jSlider_MouthU;
    private javax.swing.JSlider jSlider_MouthWidth;
    private javax.swing.JSlider jSlider_MouthX;
    private javax.swing.JSlider jSlider_MouthY;
    private javax.swing.JSlider jSlider_MouthZ;
    private javax.swing.JSlider jSlider_NoseLen;
    private javax.swing.JSlider jSlider_NosePosH;
    private javax.swing.JSlider jSlider_NoseU;
    private javax.swing.JSlider jSlider_NoseWidth;
    private javax.swing.JSlider jSlider_NoseX;
    private javax.swing.JSlider jSlider_NoseY;
    private javax.swing.JSlider jSlider_NoseZ;
    private javax.swing.JSlider jSlider_ThighLengthL;
    private javax.swing.JSlider jSlider_ThighLengthR;
    private javax.swing.JSlider jSlider_ThighThicknessL;
    private javax.swing.JSlider jSlider_ThighThicknessR;
    private javax.swing.JSlider jSlider_UpperArmLengthL;
    private javax.swing.JSlider jSlider_UpperLip;
    private javax.swing.JSlider jSlider_UpperarmLengthR;
    private javax.swing.JSlider jSlider_UpperarmThicknessL;
    private javax.swing.JSlider jSlider_UpperarmThicknessR;
    private javax.swing.JSlider jSlider_Waistline;
    private javax.swing.JSpinner jSpinner_BellyRoundness;
    private javax.swing.JSpinner jSpinner_CalvesLengthL;
    private javax.swing.JSpinner jSpinner_CalvesLengthR;
    private javax.swing.JSpinner jSpinner_CalvesThicknessL;
    private javax.swing.JSpinner jSpinner_CalvesThicknessR;
    private javax.swing.JSpinner jSpinner_ChestBroadness;
    private javax.swing.JSpinner jSpinner_ChestBulk;
    private javax.swing.JSpinner jSpinner_EyePosDL;
    private javax.swing.JSpinner jSpinner_EyePosDR;
    private javax.swing.JSpinner jSpinner_EyePosHL;
    private javax.swing.JSpinner jSpinner_EyePosHR;
    private javax.swing.JSpinner jSpinner_EyePosVL;
    private javax.swing.JSpinner jSpinner_EyePosVR;
    private javax.swing.JSpinner jSpinner_FeetLengthL;
    private javax.swing.JSpinner jSpinner_FeetLengthR;
    private javax.swing.JSpinner jSpinner_FeetThicknessL;
    private javax.swing.JSpinner jSpinner_FeetThicknessR;
    private javax.swing.JSpinner jSpinner_FingerLengthL;
    private javax.swing.JSpinner jSpinner_FingerLengthR;
    private javax.swing.JSpinner jSpinner_ForearmLengthL;
    private javax.swing.JSpinner jSpinner_ForearmLengthR;
    private javax.swing.JSpinner jSpinner_ForearmThicknessL;
    private javax.swing.JSpinner jSpinner_ForearmThicknessR;
    private javax.swing.JSpinner jSpinner_GlutRoundness;
    private javax.swing.JSpinner jSpinner_GlutSag;
    private javax.swing.JSpinner jSpinner_HandThicknessL;
    private javax.swing.JSpinner jSpinner_HandThicknessR;
    private javax.swing.JSpinner jSpinner_HeadDepth;
    private javax.swing.JSpinner jSpinner_HeadHeight;
    private javax.swing.JSpinner jSpinner_HeadUniform;
    private javax.swing.JSpinner jSpinner_HeadWidth;
    private javax.swing.JSpinner jSpinner_LowerLip;
    private javax.swing.JSpinner jSpinner_MouthWidth;
    private javax.swing.JSpinner jSpinner_NoseLen;
    private javax.swing.JSpinner jSpinner_NosePosH;
    private javax.swing.JSpinner jSpinner_NoseWidth;
    private javax.swing.JSpinner jSpinner_ThighLengthL;
    private javax.swing.JSpinner jSpinner_ThighLengthR;
    private javax.swing.JSpinner jSpinner_ThighThicknessL;
    private javax.swing.JSpinner jSpinner_ThighThicknessR;
    private javax.swing.JSpinner jSpinner_UBodyDepthScale;
    private javax.swing.JSpinner jSpinner_UBodyHeightScale;
    private javax.swing.JSpinner jSpinner_UBodyWidthScale;
    private javax.swing.JSpinner jSpinner_UbodyUniScale;
    private javax.swing.JSpinner jSpinner_UpperLip;
    private javax.swing.JSpinner jSpinner_UpperarmLengthL;
    private javax.swing.JSpinner jSpinner_UpperarmLengthR;
    private javax.swing.JSpinner jSpinner_UpperarmThicknessL;
    private javax.swing.JSpinner jSpinner_UpperarmThicknessR;
    private javax.swing.JSpinner jSpinner_Waistline;
    private javax.swing.JTabbedPane jTabbedPane_ArmsHands;
    private javax.swing.JTabbedPane jTabbedPane_Body;
    private javax.swing.JTabbedPane jTabbedPane_Head;
    private javax.swing.JTabbedPane jTabbedPane_LegsFeet;
    private javax.swing.JTabbedPane jTabbedPane_Main;
    // End of variables declaration//GEN-END:variables

////////////////////////////////////////////////////////////////////////////////
// Helper Functions
////////////////////////////////////////////////////////////////////////////////

    public void catalogHands() {
        if (m_sceneData.getAvatar() == null)
            return;

        SkeletonNode skeleton   = m_sceneData.getAvatar().getSkeleton();

        String[] szLeftHand = new String[] { "leftHand",    "leftHandThumb1",   "leftHandThumb2",   "leftHandThumb3",   "leftHandThumb4",
                                             "leftPalm",    "leftHandIndex1",   "leftHandIndex2",   "leftHandIndex3",   "leftHandIndex4",
                                                            "leftHandMiddle1",  "leftHandMiddle2",  "leftHandMiddle3",  "leftHandMiddle4",
                                                            "leftHandRing1",    "leftHandRing2",    "leftHandRing3",    "leftHandRing4",
                                                            "leftHandPinky1",   "leftHandPinky2",   "leftHandPinky3",   "leftHandPinky4" };
        String[] szRightHand = new String[] { "rightHand",  "rightHandThumb1",  "rightHandThumb2",  "rightHandThumb3",  "rightHandThumb4",
                                              "rightPalm",  "rightHandIndex1",  "rightHandIndex2",  "rightHandIndex3",  "rightHandIndex4",
                                                            "rightHandMiddle1", "rightHandMiddle2", "rightHandMiddle3", "rightHandMiddle4",
                                                            "rightHandRing1",   "rightHandRing2",   "rightHandRing3",   "rightHandRing4",
                                                            "rightHandPinky1",  "rightHandPinky2",  "rightHandPinky3",  "rightHandPinky4"};

        SkinnedMeshJoint[]  left     = new SkinnedMeshJoint[szLeftHand.length];
        SkinnedMeshJoint[]  right    = new SkinnedMeshJoint[szRightHand.length];
        int                 iSize    = szLeftHand.length;

        for (int i = 0; i < iSize; i++) {
            left[i]     = (SkinnedMeshJoint) skeleton.findChild(szLeftHand[i]);
            right[i]    = (SkinnedMeshJoint) skeleton.findChild(szRightHand[i]);
        }

        if (m_skeleton == null)
            m_skeleton = new HashMap<m_bodyPart, SkinnedMeshJoint[]>();

        m_skeleton.put(m_bodyPart.Left_Hand, left);
        m_skeleton.put(m_bodyPart.Right_Hand, right);
    }

    public void catalogLowerArms() {
        if (m_sceneData.getAvatar() == null)
            return;

        SkeletonNode skeleton   = m_sceneData.getAvatar().getSkeleton();

        String[] szLeftLowerArm     = new String[] { "leftForeArm",     "leftForeArmRoll" };
        String[] szRightLowerArm    = new String[] { "rightForeArm",    "rightForeArmRoll"};

        SkinnedMeshJoint[]  left     = new SkinnedMeshJoint[szLeftLowerArm.length];
        SkinnedMeshJoint[]  right    = new SkinnedMeshJoint[szRightLowerArm.length];
        int                 iSize    = szLeftLowerArm.length;

        for (int i = 0; i < iSize; i++) {
            left[i]     = (SkinnedMeshJoint) skeleton.findChild(szLeftLowerArm[i]);
            right[i]    = (SkinnedMeshJoint) skeleton.findChild(szRightLowerArm[i]);
        }

        if (m_skeleton == null)
            m_skeleton = new HashMap<m_bodyPart, SkinnedMeshJoint[]>();

        m_skeleton.put(m_bodyPart.Left_LowerArm, left);
        m_skeleton.put(m_bodyPart.Right_LowerArm, right);
    }

    public void catalogUpperArms() {
        if (m_sceneData.getAvatar() == null)
            return;

        SkeletonNode skeleton   = m_sceneData.getAvatar().getSkeleton();

        String[] szLeftUpperArm     = new String[] { "leftArm",     "leftArmRoll" };
        String[] szRightUpperArm    = new String[] { "rightArm",    "rightArmRoll" };

        SkinnedMeshJoint[]  left     = new SkinnedMeshJoint[szLeftUpperArm.length];
        SkinnedMeshJoint[]  right    = new SkinnedMeshJoint[szRightUpperArm.length];
        int                 iSize    = szLeftUpperArm.length;

        for (int i = 0; i < iSize; i++) {
            left[i]     = (SkinnedMeshJoint) skeleton.findChild(szLeftUpperArm[i]);
            right[i]    = (SkinnedMeshJoint) skeleton.findChild(szRightUpperArm[i]);
        }

        if (m_skeleton == null)
            m_skeleton = new HashMap<m_bodyPart, SkinnedMeshJoint[]>();

        m_skeleton.put(m_bodyPart.Left_UpperArm, left);
        m_skeleton.put(m_bodyPart.Right_UpperArm, right);
    }

    public void catalogShoulders() {
        if (m_sceneData.getAvatar() == null)
            return;

        SkeletonNode skeleton   = m_sceneData.getAvatar().getSkeleton();

        String[] szLeftShoulder     = new String[] { "leftShoulder" };
        String[] szRightShoulder    = new String[] { "rightShoulder" };

        SkinnedMeshJoint[]  left     = new SkinnedMeshJoint[szLeftShoulder.length];
        SkinnedMeshJoint[]  right    = new SkinnedMeshJoint[szRightShoulder.length];
        int                 iSize    = szLeftShoulder.length;

        for (int i = 0; i < iSize; i++) {
            left[i]     = (SkinnedMeshJoint) skeleton.findChild(szLeftShoulder[i]);
            right[i]    = (SkinnedMeshJoint) skeleton.findChild(szRightShoulder[i]);
        }

        if (m_skeleton == null)
            m_skeleton = new HashMap<m_bodyPart, SkinnedMeshJoint[]>();

        m_skeleton.put(m_bodyPart.Left_Shoulder, left);
        m_skeleton.put(m_bodyPart.Right_Shoulder, right);
    }

    public void catalogTorso() {
        if (m_sceneData.getAvatar() == null)
            return;

        SkeletonNode skeleton   = m_sceneData.getAvatar().getSkeleton();

        String[] szTorso     = new String[] { "Spine", "Spine1", "Spine2" };

        SkinnedMeshJoint[]  torso     = new SkinnedMeshJoint[szTorso.length];
        int                 iSize    = szTorso.length;

        for (int i = 0; i < iSize; i++) {
            torso[i]     = (SkinnedMeshJoint) skeleton.findChild(szTorso[i]);
        }

        if (m_skeleton == null)
            m_skeleton = new HashMap<m_bodyPart, SkinnedMeshJoint[]>();

        m_skeleton.put(m_bodyPart.Torso, torso);
    }

    public void catalogUpperLegs() {
        if (m_sceneData.getAvatar() == null)
            return;

        SkeletonNode skeleton   = m_sceneData.getAvatar().getSkeleton();

        String[] szLeftUpperLeg     = new String[] { "leftUpLeg",   "leftUpLegRoll" };
        String[] szRightUpperLeg    = new String[] { "rightUpLeg",  "rightUpLegRoll" };

        SkinnedMeshJoint[]  left     = new SkinnedMeshJoint[szLeftUpperLeg.length];
        SkinnedMeshJoint[]  right    = new SkinnedMeshJoint[szRightUpperLeg.length];
        int                 iSize    = szLeftUpperLeg.length;

        for (int i = 0; i < iSize; i++) {
            left[i]     = (SkinnedMeshJoint) skeleton.findChild(szLeftUpperLeg[i]);
            right[i]    = (SkinnedMeshJoint) skeleton.findChild(szRightUpperLeg[i]);
        }

        if (m_skeleton == null)
            m_skeleton = new HashMap<m_bodyPart, SkinnedMeshJoint[]>();

        m_skeleton.put(m_bodyPart.Left_UpperLeg, left);
        m_skeleton.put(m_bodyPart.Right_UpperLeg, right);
    }

    public void catalogLowerLegs() {
        if (m_sceneData.getAvatar() == null)
            return;

        SkeletonNode skeleton   = m_sceneData.getAvatar().getSkeleton();

        String[] szLeftLowerLeg     = new String[] { "leftLeg",     "leftLegRoll" };
        String[] szRightLowerLeg    = new String[] { "rightLeg",    "rightLegRoll" };

        SkinnedMeshJoint[]  left     = new SkinnedMeshJoint[szLeftLowerLeg.length];
        SkinnedMeshJoint[]  right    = new SkinnedMeshJoint[szRightLowerLeg.length];
        int                 iSize    = szLeftLowerLeg.length;

        for (int i = 0; i < iSize; i++) {
            left[i]     = (SkinnedMeshJoint) skeleton.findChild(szLeftLowerLeg[i]);
            right[i]    = (SkinnedMeshJoint) skeleton.findChild(szRightLowerLeg[i]);
        }

        if (m_skeleton == null)
            m_skeleton = new HashMap<m_bodyPart, SkinnedMeshJoint[]>();

        m_skeleton.put(m_bodyPart.Left_LowerLeg, left);
        m_skeleton.put(m_bodyPart.Right_LowerLeg, right);
    }

    public void catalogFeet() {
        if (m_sceneData.getAvatar() == null)
            return;

        SkeletonNode skeleton   = m_sceneData.getAvatar().getSkeleton();

        String[] szLeftFoot     = new String[] { "leftFoot",    "leftFootBall" };
        String[] szRightFoot    = new String[] { "rightFoot",   "rightFootBall" };

        SkinnedMeshJoint[]  left     = new SkinnedMeshJoint[szLeftFoot.length];
        SkinnedMeshJoint[]  right    = new SkinnedMeshJoint[szRightFoot.length];
        int                 iSize    = szLeftFoot.length;

        for (int i = 0; i < iSize; i++) {
            left[i]     = (SkinnedMeshJoint) skeleton.findChild(szLeftFoot[i]);
            right[i]    = (SkinnedMeshJoint) skeleton.findChild(szRightFoot[i]);
        }

        if (m_skeleton == null)
            m_skeleton = new HashMap<m_bodyPart, SkinnedMeshJoint[]>();

        m_skeleton.put(m_bodyPart.Left_Foot, left);
        m_skeleton.put(m_bodyPart.Right_Foot, right);
    }

    public void catalogHead() {
        if (m_sceneData.getAvatar() == null)
            return;

        SkeletonNode skeleton   = m_sceneData.getAvatar().getSkeleton();

        String[] szHead     = new String[] { "Head",            "Jaw",              "Tongue",           "Tongue1",
                                             "leftLowerLip",    "rightLowerLip",    "leftInnerBrow",    "leftEyeLid",
                                             "leftOuterBrow",   "leftCheek",        "leftUpperLip",     "leftOuterLip",
                                             "rightInnerBrow",  "rightOuterBrow",   "rightCheek",       "rightOuterLip",
                                             "rightUpperLip",   "rightEyeLid",      "leftEye",          "rightEye"};

        SkinnedMeshJoint[]  head     = new SkinnedMeshJoint[szHead.length];
        int                 iSize    = szHead.length;

        for (int i = 0; i < iSize; i++) {
            head[i]     = (SkinnedMeshJoint) skeleton.findChild(szHead[i]);
        }

        if (m_skeleton == null)
            m_skeleton = new HashMap<m_bodyPart, SkinnedMeshJoint[]>();

        m_skeleton.put(m_bodyPart.Head, head);
    }

    public void catalogNeck() {
        if (m_sceneData.getAvatar() == null)
            return;

        SkeletonNode skeleton   = m_sceneData.getAvatar().getSkeleton();

        String[] szNeck     = new String[] { "Neck" };

        SkinnedMeshJoint[]  neck     = new SkinnedMeshJoint[szNeck.length];
        int                 iSize    = szNeck.length;

        for (int i = 0; i < iSize; i++) {
            neck[i]     = (SkinnedMeshJoint) skeleton.findChild(szNeck[i]);
        }

        if (m_skeleton == null)
            m_skeleton = new HashMap<m_bodyPart, SkinnedMeshJoint[]>();

        m_skeleton.put(m_bodyPart.Neck, neck);
    }

    public void catalogEyes() {
        if (m_sceneData.getAvatar() == null)
            return;

        SkeletonNode skeleton   = m_sceneData.getAvatar().getSkeleton();

        String[] szEyes     = new String[] { "leftInnerBrow",   "rightInnerBrow",  "leftOuterBrow",    "rightOuterBrow",
                                             "leftEyeLid",      "rightEyeLid",     "leftEye",          "rightEye",
                                             "leftCheek",       "rightCheek" };

        SkinnedMeshJoint[]  eyes     = new SkinnedMeshJoint[szEyes.length];
        int                 iSize    = szEyes.length;

        for (int i = 0; i < iSize; i++) {
            eyes[i]     = (SkinnedMeshJoint) skeleton.findChild(szEyes[i]);
        }

        if (m_skeleton == null)
            m_skeleton = new HashMap<m_bodyPart, SkinnedMeshJoint[]>();

        m_skeleton.put(m_bodyPart.Eyes, eyes);
    }

    public void catalogLips() {
        if (m_sceneData.getAvatar() == null)
            return;

        SkeletonNode skeleton   = m_sceneData.getAvatar().getSkeleton();

        String[] szLips     = new String[] { "leftLowerLip",    "rightLowerLip",    "leftUpperLip",     "rightUpperLip",
                                             "leftCheek",       "rightCheek",       "leftOuterLip",     "rightOuterLip" };

        SkinnedMeshJoint[]  lips     = new SkinnedMeshJoint[szLips.length];
        int                 iSize    = szLips.length;

        for (int i = 0; i < iSize; i++) {
            lips[i]     = (SkinnedMeshJoint) skeleton.findChild(szLips[i]);
        }

        if (m_skeleton == null)
            m_skeleton = new HashMap<m_bodyPart, SkinnedMeshJoint[]>();

        m_skeleton.put(m_bodyPart.Lips, lips);
    }

    public void createJointCatalog() {
        if (m_sceneData.getAvatar() == null)
            return;

        catalogHands();
        catalogLowerArms();
        catalogUpperArms();
        catalogShoulders();
        catalogTorso();
        catalogUpperLegs();
        catalogLowerLegs();
        catalogFeet();
        catalogHead();
        catalogNeck();
        catalogEyes();
        catalogLips();
    }
}
