/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JFrame_MatrixExplorer.java
 *
 * Created on Jan 21, 2009, 11:17:04 AM
 */

package imi.gui;

import imi.scene.PJoint;
import imi.scene.PMatrix;
import imi.scene.PNode;
import imi.scene.polygonmodel.PPolygonMeshInstance;
import imi.scene.polygonmodel.parts.skinned.SkeletonNode;

/**
 *
 * @author ptruong
 */
public class JFrame_MatrixExplorer extends javax.swing.JFrame {

    private PMatrix m_WorldMatrix           = null;
    private PMatrix m_LocalMatrix           = null;
    private PMatrix m_LocalModifierMatrix   = null;

    /** Creates new form JFrame_MatrixExplorer */
    public JFrame_MatrixExplorer() {
        initComponents();
    }

    public JFrame_MatrixExplorer(PNode node) {
        initComponents();

        if (node == null)
            return;
        
        setMatrixWidgets(node);
    }

    public void setTargetNode(PNode node) {
        if (node == null)
            return;

        setMatrixWidgets(node);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        WorldMatrix = new imi.gui.PMatrixWidget();
        LocalMatrix = new imi.gui.PMatrixWidget();
        LocalModifierMatrix = new imi.gui.PMatrixWidget();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        WorldMatrix.setName("World Matrix");
        getContentPane().add(WorldMatrix, new java.awt.GridBagConstraints());

        LocalMatrix.setName("Local Matrix");
        getContentPane().add(LocalMatrix, new java.awt.GridBagConstraints());

        LocalModifierMatrix.setName("Local Modifier Matrix");
        getContentPane().add(LocalModifierMatrix, new java.awt.GridBagConstraints());

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrame_MatrixExplorer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private imi.gui.PMatrixWidget LocalMatrix;
    private imi.gui.PMatrixWidget LocalModifierMatrix;
    private imi.gui.PMatrixWidget WorldMatrix;
    // End of variables declaration//GEN-END:variables

    private void setMatrixWidgets(PNode node) {
        
        if (node instanceof PJoint) {

            PJoint jointNode        = ((PJoint)node);
            m_WorldMatrix           = node.getTransform().getWorldMatrix(true);
            m_LocalMatrix           = node.getTransform().getLocalMatrix(true);
            m_LocalModifierMatrix   = jointNode.getLocalModifierMatrix();

            WorldMatrix.setTargetMatrix(m_WorldMatrix);
            LocalMatrix.setTargetMatrix(m_LocalMatrix);
            LocalModifierMatrix.setTargetMatrix(m_LocalModifierMatrix);

            WorldMatrix.setEnabled(true);
            LocalMatrix.setEnabled(true);
            LocalModifierMatrix.setEnabled(true);

        } else if (node instanceof PPolygonMeshInstance) {

            m_WorldMatrix                   = node.getTransform().getWorldMatrix(true);
            m_LocalMatrix                   = node.getTransform().getLocalMatrix(true);
            m_LocalModifierMatrix           = null;

            WorldMatrix.setTargetMatrix(m_WorldMatrix);
            LocalMatrix.setTargetMatrix(m_LocalMatrix);

            WorldMatrix.setEnabled(true);
            LocalMatrix.setEnabled(true);
            LocalModifierMatrix.setEnabled(false);

        } else if (node instanceof SkeletonNode) {

            m_WorldMatrix           = node.getTransform().getWorldMatrix(true);
            m_LocalMatrix           = node.getTransform().getLocalMatrix(true);
            m_LocalModifierMatrix   = null;

            WorldMatrix.setTargetMatrix(m_WorldMatrix);
            LocalMatrix.setTargetMatrix(m_LocalMatrix);

            WorldMatrix.setEnabled(true);
            LocalMatrix.setEnabled(true);
            LocalModifierMatrix.setEnabled(false);

        } else {

            m_WorldMatrix           = null;
            m_LocalMatrix           = null;
            m_LocalModifierMatrix   = null;

            WorldMatrix.setEnabled(false);
            LocalMatrix.setEnabled(false);
            LocalModifierMatrix.setEnabled(false);
        }
    }
}
