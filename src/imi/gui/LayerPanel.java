/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LayerPanel.java
 *
 * Created on Feb 26, 2009, 3:05:56 PM
 */

package imi.gui;

import imi.imaging.ImageData;
import imi.imaging.ImageLibraryExt;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.TexturePaint;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JTable;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ptruong
 */
public class LayerPanel extends javax.swing.JPanel {
////////////////////////////////////////////////////////////////////////////////
// Data Members
////////////////////////////////////////////////////////////////////////////////
    private TextureCreator          m_parent    = null;
    private String                  m_texName   = null;

////////////////////////////////////////////////////////////////////////////////
// Methods
////////////////////////////////////////////////////////////////////////////////
    /** Creates new form LayerPanel */
    public LayerPanel() {
        initComponents();
        initJFileChooser();
    }

    public LayerPanel(TextureCreator parent) {
        m_parent = parent;
        initComponents();
        initJFileChooser();
    }

    public void saveTexture() {
        File save = new File("new_texture.png");
        jFileChooser_SaveTexture.setSelectedFile(save);

        int returnValue = jFileChooser_SaveTexture.showSaveDialog(this);
        if (returnValue == javax.swing.JFileChooser.APPROVE_OPTION) {
            save = jFileChooser_SaveTexture.getSelectedFile();
            String extension = save.getName().substring(save.getName().lastIndexOf(".") + 1);
//            ImageLibraryExt.save(m_parent.getBlendImagePanel().getFinalImage().m_curImage, save, extension);
            ImageLibraryExt.save(m_parent.getFinalImagePanel().getFinalImage().m_curImage, save, extension);
        }
    }

    public void saveNAddTexture() {
        File save = new File("new_texture.png");
        jFileChooser_SaveTexture.setSelectedFile(save);

        int returnValue = jFileChooser_SaveTexture.showSaveDialog(this);
        if (returnValue == javax.swing.JFileChooser.APPROVE_OPTION) {
            save = jFileChooser_SaveTexture.getSelectedFile();
            String extension = save.getName().substring(save.getName().lastIndexOf(".") + 1);
//            ImageLibraryExt.save(m_parent.getBlendImagePanel().getFinalImage().m_curImage, save, extension);
            ImageLibraryExt.save(m_parent.getFinalImagePanel().getFinalImage().m_curImage, save, extension);
            m_parent.addNewlyCreatedLayer(save);
        }
    }

    public void loadTexture(int loadType) {
        int returnValue = jFileChooser_TextureSelector.showOpenDialog(this);
        if (returnValue == javax.swing.JFileChooser.APPROVE_OPTION) {
            File texture = jFileChooser_TextureSelector.getSelectedFile();

            switch(loadType)
            {
                case 0: // Load baseimage
                {
                    loadBaseImage(texture);
                    break;
                }
                case 1: // Load blend image layer
                {
                    addBlendLayer(texture);
                    break;
                }
                default:
                {
                    System.out.println("Should have not gotten here");
                }
            }

            updatePanels();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jFileChooser_SaveTexture = new javax.swing.JFileChooser();
        jFileChooser_TextureSelector = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        ButtonPanel = new javax.swing.JPanel();
        LoadBaseImage = new javax.swing.JButton();
        AddBlendLayer = new javax.swing.JButton();
        RemoveBlendLayer = new javax.swing.JButton();
        SaveBlendImage = new javax.swing.JButton();
        jButton_SaveNAdd = new javax.swing.JButton();

        jFileChooser_TextureSelector.setDialogTitle("Load Texture");

        setMinimumSize(new java.awt.Dimension(0, 0));
        setPreferredSize(new java.awt.Dimension(400, 300));
        setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setPreferredSize(new java.awt.Dimension(400, 200));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Visibile", "Layer Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        setVisibleColumn();
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getColumn(0).setResizable(false);
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(50);
        jTable1.getColumnModel().getColumn(1).setResizable(false);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jScrollPane1, gridBagConstraints);

        ButtonPanel.setMinimumSize(new java.awt.Dimension(0, 0));
        ButtonPanel.setLayout(new java.awt.GridBagLayout());

        LoadBaseImage.setText("Load Base Image");
        LoadBaseImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadTexture(0);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ButtonPanel.add(LoadBaseImage, gridBagConstraints);

        AddBlendLayer.setText("Add Blend Image");
        AddBlendLayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadTexture(1);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ButtonPanel.add(AddBlendLayer, gridBagConstraints);

        RemoveBlendLayer.setText("Remove Blend Image");
        RemoveBlendLayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_parent.removeBlendLayer();
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ButtonPanel.add(RemoveBlendLayer, gridBagConstraints);

        SaveBlendImage.setText("Save Blend Image");
        SaveBlendImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTexture();
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ButtonPanel.add(SaveBlendImage, gridBagConstraints);

        jButton_SaveNAdd.setText("Save & Add Blend Image To Material");
        jButton_SaveNAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveNAddTexture();
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ButtonPanel.add(jButton_SaveNAdd, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(ButtonPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddBlendLayer;
    private javax.swing.JPanel ButtonPanel;
    private javax.swing.JButton LoadBaseImage;
    private javax.swing.JButton RemoveBlendLayer;
    private javax.swing.JButton SaveBlendImage;
    private javax.swing.JButton jButton_SaveNAdd;
    private javax.swing.JFileChooser jFileChooser_SaveTexture;
    private javax.swing.JFileChooser jFileChooser_TextureSelector;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

////////////////////////////////////////////////////////////////////////////////
// Helper Functions
////////////////////////////////////////////////////////////////////////////////

    public void setVisibleColumn() {
        jTable1.getSelectionModel().addListSelectionListener(new SelectionListener(jTable1));
        jTable1.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(new JCheckBox()));
        jTable1.getColumnModel().getColumn(0).setCellRenderer(new CheckBoxCellRenderer());
        jTable1.getColumnModel().getColumn(0).setMaxWidth(50);
        jTable1.getColumnModel().getColumn(0).setMinWidth(50);
        jTable1.getColumnModel().getColumn(0).getCellEditor().addCellEditorListener(new CellEditorListener() {

            public void editingStopped(ChangeEvent e) {
                boolean visibility = (Boolean) jTable1.getValueAt(jTable1.getSelectedRow(), jTable1.getSelectedColumn());
                m_parent.getBlendImagePanel().updateLayerVisibility(jTable1.getSelectedRow(), visibility);

                ImageData editedLayer = m_parent.getBlendImagePanel().getFinalImage();
                ArrayList<ImageData> renderables = new ArrayList<ImageData>();
                renderables.add(m_parent.getBaseImagePanel().getRenderables().get(0));
                if (editedLayer != null)
                    renderables.add(editedLayer);
                m_parent.getFinalImagePanel().setRenderables(renderables);

                if (renderables.size() < 2)
                    m_parent.getFinalImagePanel().updateOpacity(0, -1);
                else
                    m_parent.getFinalImagePanel().addDecalToBase();
            }

            public void editingCanceled(ChangeEvent e) {
                System.out.println("Should never get here for checkbox editing");
            }
        });
    }

    public void addLayer(String name) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.addRow(new Object[] { Boolean.TRUE, name });
        jTable1.setRowSelectionInterval(model.getRowCount()-1, model.getRowCount()-1);
    }

    public void removeLayer() {
        if (jTable1.getSelectedRow() != -1) {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            m_parent.removeBlendLayer(jTable1.getSelectedRow());
            model.removeRow(jTable1.getSelectedRow());

            if(model.getRowCount() > 0)
                jTable1.setRowSelectionInterval(model.getRowCount()-1, model.getRowCount()-1);

            m_parent.updateImage(null);
        }
    }

    public int getSelectedLayer() {
        return jTable1.getSelectedRow();
    }

    public void initJFileChooser() {

        FileFilter textFilter = new FileFilter() {
            @Override
            public boolean accept(File f) {
                if(f.isDirectory()) {
                    return true;
                }

                if (f.getName().toLowerCase().endsWith(".png") || f.getName().toLowerCase().endsWith(".jpg") || f.getName().toLowerCase().endsWith(".jpeg") ||
                    f.getName().toLowerCase().endsWith(".gif") || f.getName().toLowerCase().endsWith(".bmp") || f.getName().toLowerCase().endsWith(".tga")) {
                    return true;
                }
                return false;
            }
            @Override
            public String getDescription() {
                String szDescription = "Image Files (*.png, *.jpg, *.jpeg, *.gif, *.bmp, *.tga)";
                return szDescription;
            }
        };

        jFileChooser_TextureSelector = new javax.swing.JFileChooser();
        jFileChooser_TextureSelector.setDialogTitle("Load Texture File");
        java.io.File loadDirectory = new java.io.File(System.getProperty("user.dir"));

        jFileChooser_TextureSelector.setCurrentDirectory(loadDirectory);
        jFileChooser_TextureSelector.setDoubleBuffered(true);
        jFileChooser_TextureSelector.setDragEnabled(true);
        jFileChooser_TextureSelector.addChoosableFileFilter((FileFilter)textFilter);

        jFileChooser_SaveTexture = new javax.swing.JFileChooser();
        jFileChooser_SaveTexture.setDialogTitle("Save Texture File");
        java.io.File saveDirectory = new java.io.File(System.getProperty("user.dir"));

        jFileChooser_SaveTexture.setCurrentDirectory(saveDirectory);
        jFileChooser_SaveTexture.setDoubleBuffered(true);
        jFileChooser_SaveTexture.setDragEnabled(true);
        jFileChooser_SaveTexture.addChoosableFileFilter((FileFilter)textFilter);
    }

    public void loadBaseImage(File texture) {
        m_parent.getBaseImagePanel().getRenderables().clear();
        m_parent.getBaseImagePanel().setBaseImageSize(null);
        m_parent.getBaseImagePanel().addImage(texture);
        m_parent.getBaseImagePanel().updateOpacity(0, -1);
        m_parent.setBaseImageSize();

    }

    public void addBlendLayer(File texture) {
        if (m_parent.getBlendImagePanel().getRenderables().size() <= 0) {
            m_parent.getBlendImagePanel().getRenderables().add(createBaseBlend(m_parent.getBaseImagePanel().getBaseImageSize()));
            m_parent.addBlendLayer("BlendBase");
        }

        m_parent.getBlendImagePanel().addImage(texture);
        m_parent.getBlendImagePanel().updateOpacity(0, -1);
        m_texName = texture.getName();
        m_parent.addBlendLayer(m_texName);

    }

    public void updatePanels() {

        Dimension baseSize                  = m_parent.getBaseImagePanel().getBaseImageSize();
        ArrayList<ImageData> bRenderables   = m_parent.getBlendImagePanel().getRenderables();
        ArrayList<ImageData> renderables    = new ArrayList<ImageData>();
        ImageData finalImage                = m_parent.getBlendImagePanel().getFinalImage();

        if (m_parent.getBaseImagePanel().getRenderables().size() > 0)
            renderables.add(m_parent.getBaseImagePanel().getRenderables().get(0));

        if (bRenderables.size() <= 0) {
            bRenderables.add(createBaseBlend(baseSize));
            m_parent.addBlendLayer("BlendBase");
        } else if (bRenderables.size() == 1) {
            bRenderables.set(0, createBaseBlend(baseSize));
            renderables.add(bRenderables.get(0));
        } else if (finalImage != null) {
            bRenderables.set(0, createBaseBlend(baseSize));
            renderables.add(finalImage);
        }

        m_parent.getFinalImagePanel().getRenderables().clear();
        m_parent.getFinalImagePanel().setRenderables(renderables);

        if (renderables.size() == 1)
            m_parent.getFinalImagePanel().updateOpacity(0, -1);
        else
            m_parent.getFinalImagePanel().addDecalToBase();
    }

    public ImageData createBaseBlend(Dimension d) {
        BufferedImage image = new BufferedImage(d.width, d.height, BufferedImage.TYPE_INT_RGB);
        Graphics2D g2D = image.createGraphics();
        g2D.setColor(Color.WHITE);
        g2D.fillRect(0, 0, d.width, d.height);
        g2D.dispose();

        int[] pixels        = ImageLibraryExt.imageToPixels(image);

        ImageData imageData         = new ImageData(null, "blankBase", 0, 0, 1.0, 1.0, 0.0, 1.0, image, pixels);
        imageData.m_curImage        = ImageLibraryExt.pixelsToImage(pixels, d.width, d.height);
        imageData.m_imageRect.setBounds(0, 0, d.width, d.height);
        imageData.m_textureAnchor.setBounds(0, 0, d.width, d.height);
        imageData.m_texturePaint    = new TexturePaint(image, imageData.m_textureAnchor);

        return imageData;
    }
    
////////////////////////////////////////////////////////////////////////////////
// Support Classes
////////////////////////////////////////////////////////////////////////////////

    public static class CheckBoxCellRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean isFocused, int row, int col) {
            boolean marked = (Boolean) value;
            JCheckBox rendererComponent = new JCheckBox();
            if (marked) {
                rendererComponent.setSelected(true);
            }
            return rendererComponent;
        }
    }

    public class SelectionListener implements ListSelectionListener {
        private JTable  m_table;

        public SelectionListener(JTable table) {
            m_table = table;
        }

        public void valueChanged(ListSelectionEvent e) {
            if (m_table.getSelectedRow() == -1) {
                m_parent.resetGUI();
                return;
            }

            m_parent.toggleGUIUpdate(false);
            int index       = m_table.getSelectedRow();
            ImageData data  = m_parent.getBlendImagePanel().getSelectedLayer(index);
            m_parent.updateControls(data);
            m_parent.toggleGUIUpdate(true);
        }
    }
}
